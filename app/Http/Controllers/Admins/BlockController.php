<?php

namespace App\Http\Controllers\Admins;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Repositories\ApartmentRepository;
use App\Repositories\BlockRepository;
use Session;

class BlockController extends Controller
{

    protected $paradigm_id;

    protected $apartmentRepository;

    protected $url = '';

    public function __construct(Request $request,
                                ApartmentRepository $apartmentRepository,
                                BlockRepository $blockRepository) {

        $this->apartmentRepository = $apartmentRepository;
        $this->blockRepository = $blockRepository;

        if (isset($request->url) && $request->url != null) {

            $this->url = $request->url;

        }

        if (isset($request->paradigm_id) && $request->paradigm_id != null) {

            $this->paradigm_id = $request->paradigm_id;

        }

    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $params = $request->all();

        $blocks = $this->blockRepository->getBlockByParams($params, $this->paradigm_id);

        $apartments = $this->apartmentRepository->getLists();

        return view('admins.paradigms.apartments.blocks.list_block')->with([
            'apartments' => $apartments,
            'blocks' => $blocks,
            'params' => $params,
            'url' => $this->url,
            'paradigm_id' => $this->paradigm_id,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $params = $request->all();

        $block = $this->blockRepository->create($params);

        Session::put('success', 'Thêm thành công!');
        Session::save();

        return redirect()->back();
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id, Request $request)
    {
        $params = $request->all();

        $block = $this->blockRepository->getById($params['id']);

        return view('admins.paradigms.apartments.blocks.modal_update_block')->with([

            'block' => $block,

            'url' => $params['url'],

            'paradigm_id' => $params['paradigm_id']

        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $params = $request->all();

        $block = $this->blockRepository->update($id, ['name' => $params['name']]);

        Session::put('success', 'Sửa thành công!');
        Session::save();

        return redirect()->back();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id, Request $request)
    {
        $params = $request->all();

        $this->blockRepository->deleteByIdByParadigmID($id, $params['paradigm_id']);

        Session::put('success', 'Xóa thành công!');
        Session::save();

        return redirect()->back();
    }


    public function getBlockByApartmentID(Request $request) {

        $params = $request->all();

        $blocks = $this->blockRepository->getBlockByApartmentId($params, $this->paradigm_id);

        return view('admins.paradigms.apartments.blocks.ajax_blocks')->with([

            'blocks' => $blocks,
            'type' => 'blocks'

        ]);

    }

}
