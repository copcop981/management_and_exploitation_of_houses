<?php

namespace App\Http\Controllers\Admins;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\TypePrice;
use App\Repositories\ApartmentRepository;
use App\Repositories\RoomRepository;
use App\Repositories\HouseholdInformationRepository;
use App\Repositories\PayMethodRepository;
use App\Repositories\TypePriceRepository;
use App\Repositories\TypeReceiptRepository;
use App\Repositories\AmountReceivedRepository;
use App\Repositories\AmountReceived_1_Repository;
use App\Repositories\AmountReceived_7_Repository;
use App\Repositories\ParadigmRepository;
use Session;
use Auth;
use App\Repositories\AccountRepository;
use App\Repositories\DorRepository;
use SoapClient;
use Carbon\Carbon;
use Illuminate\Support\Str;

class AmountReceivedController extends Controller
{

    // protected $paradigm_id;

    protected $apartmentRepository;

    // protected $url = '';

    protected $roomRepository;

    protected $householdInformationRepository;

    protected $payMethodRepository;

    protected $typePriceRepository;

    protected $typeReceiptRepository;

    protected $amountReceivedRepository;

    protected $amountReceived_1_Repository;

    protected $amountReceived_7_Repository;

    protected $accountRepository;

    protected $dorRepository;

    protected $tpRepo;
    protected $trRepo;

    protected $paradigmRepository;

    public function __construct(Request $request,
                                ApartmentRepository $apartmentRepository,
                                RoomRepository $roomRepository,
                                HouseholdInformationRepository $householdInformationRepository,
                                PayMethodRepository $payMethodRepository,
                                TypePriceRepository $typePriceRepository,
                                TypeReceiptRepository $typeReceiptRepository,
                                AmountReceivedRepository $amountReceivedRepository,
                                AmountReceived_1_Repository $amountReceived_1_Repository,
                                AmountReceived_7_Repository $amountReceived_7_Repository,
                                AccountRepository $accountRepository,
                                DorRepository $dorRepository,
                                TypePriceRepository $tpRepo,
                                TypeReceiptRepository $trRepo,
                                ParadigmRepository $paradigmRepository) {

        $this->apartmentRepository = $apartmentRepository;

        $this->roomRepository = $roomRepository;

        $this->householdInformationRepository = $householdInformationRepository;

        $this->payMethodRepository = $payMethodRepository;

        $this->typePriceRepository = $typePriceRepository;

        $this->typeReceiptRepository = $typeReceiptRepository;

        $this->amountReceivedRepository = $amountReceivedRepository;

        $this->amountReceived_1_Repository = $amountReceived_1_Repository;

        $this->amountReceived_7_Repository = $amountReceived_7_Repository;

        $this->accountRepository = $accountRepository;

        $this->dorRepository = $dorRepository;

        $this->paradigmRepository = $paradigmRepository;

        $this->tpRepo = $tpRepo;
        $this->trRepo = $trRepo;

        // if (isset($request->url) && $request->url != null) {

        //     $this->url = $request->url;

        // }

        // if (isset($request->paradigm_id) && $request->paradigm_id != null) {

        //     $this->paradigm_id = $request->paradigm_id;

        // }

    }

    public function tpParams($req) {
        $name = $req->get('name');
        $typeReceiptId = $req->get('typeReceiptId');
        $paradigmId = $req->get('paradigmId');
        $params = [
            'type' => $name,
            'type_receipt_id' => $typeReceiptId,
            'paradigm_id' => $paradigmId,
        ];
        return $params;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    // 1. Chung cư

    public function getParadigmsApartmentCollect(Request $request) {



        $params = $request->all();

        if (!isset($params['name'])) {

            $params['name'] = '';

        }

        if (!isset($params['apartment_id'])) {

            $params['apartment_id'] = 0;

        }

        $room_id = 0;

        $household_id = 0;

        if (isset($params['household_information_id'])) {

            $household_id = $params['household_information_id'];

        }

        $room = $this->roomRepository->getRoomByParams($params, $this->paradigm_id);

        if ($room) {

            $room_id = $room->id;

        }

        $householdInformations = $this->householdInformationRepository->getByRoomID($room_id);

        $householdInformation = $this->householdInformationRepository->getById($household_id);

        $payMethods = $this->payMethodRepository->getLists();

        $type_prices = $this->typePriceRepository->getListByParadigmID($this->paradigm_id);



        $apartments = $this->apartmentRepository->getApartmentByParadigmID($this->paradigm_id);

        return view('admins.paradigms.apartments.amount-received.collect')->with([

            'apartments' => $apartments,
            'params' => $params,
            'url' => $this->url,
            'paradigm_id' => $this->paradigm_id,
            'householdInformations' => $householdInformations,
            'room' => $room,
            'householdInformation' => $householdInformation,
            'payMethods' => $payMethods,
            'type_prices' => $type_prices

        ]);

    }

    public function postParadigmsApartmentCollect(Request $request) {

        $account = Auth::guard('account')->user();

        $paradigm = $this->paradigmRepository->getById($this->paradigm_id);

        $params = $request->all();

        unset($params['_token']);
        unset($params['_method']);

        $params['account_id'] = $account->id;

        if (!isset($params['price_cash'])) {

            $params['price_cash'] = 0;

        } 

        if (!isset($params['price_transfer'])) {

            $params['price_transfer'] = 0;

        } 

        $params['sum_price_amount_received'] = $params['price_cash'] + $params['price_transfer'];


        $amount_in_words = convert_curency_to_words($params['sum_price_amount_received']);

        // kiểm tra loại phiếu xuất
        $type_receipt_id = $this->typePriceRepository->getById($params['type_price_id'])->type_receipt_id; 

        $params['type_receipt_id'] = $type_receipt_id;

        if ($type_receipt_id === 1) 
        {

            $params['number_bill_string'] = 'BL10'.($paradigm->receipt_number + 1);

            $params['number_bill_number'] = $paradigm->receipt_number + 1;

            $paradigm->receipt_number = $paradigm->receipt_number + 1;

            $paradigm->save();

        }
        else if ($type_receipt_id === 2) 
        {

            $params['number_bill_string'] = 'PT10'.($paradigm->number_bill + 1);

            $params['number_bill_number'] = $paradigm->number_bill + 1;

            $paradigm->number_bill = $paradigm->number_bill + 1;

            $paradigm->save();

        }
        else if ($type_receipt_id === 3)
        {

            $params['number_bill_string'] = 'HĐ10'.($paradigm->invoice_number + 1);

            $params['number_bill_number'] = $paradigm->invoice_number + 1;

            $paradigm->invoice_number = $paradigm->invoice_number + 1;

            $paradigm->save();

        }

        $amountReceived = $this->amountReceivedRepository->create($params);

        if ($amountReceived) {

            $params['amount_received_id'] = $amountReceived->id;

            $amountReceived7 = $this->amountReceived_1_Repository->create($params);

            Session::put('success', 'Thành công!');
            Session::save();

            return view('admins.paradigms.apartments.receipt.bill')->with([

                'amountReceived7' => $amountReceived7,
                'amount_in_words' => $amount_in_words,
                'url' => $this->url,

            ]);

        }

        Session::put('error', 'Thất bại!');
        Session::save();

        return redirect()->back();

    }

    public function getParadigmsApartmentStatistical(Request $request) {

        $params = $request->all();

        if (isset($params['name_room']) && $params['name_room'] != '') {

            $room = getRoomByName($params['name_room']);

            if ($room) {

                $params['room_id'] = $room->id;

            }
        }

        $amountReceived_1_s = $this->amountReceived_1_Repository->getListByParams($params, $this->paradigm_id);

        $accounts = $this->accountRepository->getLists();

        $type_prices = $this->typePriceRepository->getListByParadigmID($this->paradigm_id);

        $apartments = $this->apartmentRepository->getApartmentByParadigmID($this->paradigm_id);

        return view('admins.paradigms.apartments.amount-received.statistical')->with([

            'type_prices' => $type_prices,
            'url' => $this->url,
            'apartments' => $apartments,
            'accounts' => $accounts,
            'paradigm_id' => $this->paradigm_id,

            'params' => $params,
            'amountReceived_1_s' => $amountReceived_1_s,

        ]);

    }

    public function getParadigmsApartmentHistory(Request $request) {

        $params = $request->all();

        $amountReceived_1_s = $this->amountReceived_1_Repository->getListByParams($params, $this->paradigm_id);

        $accounts = $this->accountRepository->getLists();

        $type_prices = $this->typePriceRepository->getListByParadigmID($this->paradigm_id);

        $apartments = $this->apartmentRepository->getApartmentByParadigmID($this->paradigm_id);

        return view('admins.paradigms.apartments.amount-received.history')->with([

            'type_prices' => $type_prices,
            'url' => $this->url,
            'apartments' => $apartments,
            'accounts' => $accounts,
            'paradigm_id' => $this->paradigm_id,

            'params' => $params,
            'amountReceived_1_s' => $amountReceived_1_s,

        ]);

    }

    public function getParadigmsApartmentTypePrice() {
        $paradigmId = 1;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.apartments.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }
 
    public function postParadigmsApartmentTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsApartmentTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsApartmentTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsApartmentTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsApartmentTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.apartments.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.apartments.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsApartmentTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.apartments.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }

    public function postConfirmSendAccountant(Request $request) {

        $params = $request->all();

        if (isset($params['ids']) && !empty($params['ids'])) {

            foreach ($params['ids'] as $key => $value) {
                
                $this->amountReceived_1_Repository->update($value, ['send_accountant' => 1]);

            }

        }

        return redirect()->back();
    }

    public function getParadigmsApartmentCollectEdit(Request $request) {

        $amountReceived_1_ = $this->amountReceived_1_Repository->getById($request->id);

        return view('admins.paradigms.apartments.amount-received.modal_update_apartment')->with([
            'amountReceived_1_' => $amountReceived_1_,
            'paradigm_id' => $this->paradigm_id,
            'url' => $this->url
        ]);

    }

    public function postParadigmsApartmentCollectEdit($id, Request $request) {

        $amountReceived_1_ = $this->amountReceived_1_Repository->getById($id);

        $paradigm = $this->paradigmRepository->getById($this->paradigm_id);

        $params = [
            'household_information_id' => $amountReceived_1_->household_information_id,
            'type_price_id' => $amountReceived_1_->type_price_id,
            'pay_method_id' => $amountReceived_1_->pay_method_id,
            'dormitory_id' => $amountReceived_1_->dormitory_id,
            'sum_price_amount_received' => $amountReceived_1_->sum_price_amount_received,
            'address' => $amountReceived_1_->address,
            'rental_address' => $amountReceived_1_->rental_address,
            'apartment_number' => $amountReceived_1_->apartment_number,
            'content_bill_debt_month' => $request->content_bill_debt_month,
            'content_bill_debt_additional_arrears' => $request->content_bill_debt_additional_arrears,
            'price_cash' => $amountReceived_1_->price_cash,
            'price_transfer' => $amountReceived_1_->price_transfer,
            'parent_id' => $amountReceived_1_->id,
            'account_id' => $amountReceived_1_->account_id,
            'account_id_for' => $amountReceived_1_->account_id_for,
            'paradigm_id' => $amountReceived_1_->paradigm_id,
            'send_accountant' => $amountReceived_1_->send_accountant,
            'district_id' => $amountReceived_1_->district_id,
            'ward_id' => $amountReceived_1_->ward_id,
            'apartment_id' => $amountReceived_1_->apartment_id,
            'room_id' => $amountReceived_1_->room_id,
            'amount_received_id' => $amountReceived_1_->amount_received_id,
            'status' => 1,
            'fullname' => $request->fullname,
            'type_receipt_id' => $amountReceived_1_->type_receipt_id,
        ];

        $type_receipt_id = $this->typePriceRepository->getById($amountReceived_1_->type_price_id)->type_receipt_id; 

        $params['type_receipt_id'] = $type_receipt_id;

        if ($type_receipt_id === 1) 
        {

            $params['number_bill_string'] = 'BL10'.($paradigm->receipt_number + 1);

            $params['number_bill_number'] = $paradigm->receipt_number + 1;

            $paradigm->receipt_number = $paradigm->receipt_number + 1;

            $paradigm->save();

        }
        else if ($type_receipt_id === 2) 
        {

            $amountReceived_1_ = $this->amountReceived_1_Repository->update($id, ['fullname' => $request->fullname, 'content_bill_debt_month' => $request->content_bill_debt_month, 'content_bill_debt_additional_arrears' => $request->content_bill_debt_additional_arrears, 'status' => 1]);

            return redirect()->back();

        }
        else if ($type_receipt_id === 3)
        {

            $params['number_bill_string'] = 'HĐ10'.($paradigm->invoice_number + 1);

            $params['number_bill_number'] = $paradigm->invoice_number + 1;

            $paradigm->invoice_number = $paradigm->invoice_number + 1;

            $paradigm->save();

        }

        // create new 

        $amountReceived_1_new = $this->amountReceived_1_Repository->create($params);

        // update status old 

        $this->amountReceived_1_Repository->update($id, ['status' => 1, 'parent_id' => $amountReceived_1_new->id]);


        Session::put('success', 'Điều chỉnh thành công!');
        Session::save();

        return redirect()->back();

    }


    // 2. Nhà dân
    public function getParadigmsPeopleHouseTypePrice() {
        $paradigmId = 2;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.people-house.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsPeopleHouseTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsPeopleHouseTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsPeopleHouseTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsPeopleHouseTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsPeopleHouseTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.people-house.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.people-house.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsPeopleHouseTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.people-house.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }



    // 3. Nhà cơ quan
    public function getParadigmsAgencyHouseTypePrice() {
        $paradigmId = 3;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.agency-house.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsAgencyHouseTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsAgencyHouseTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsAgencyHouseTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsAgencyHouseTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsAgencyHouseTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.agency-house.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.agency-house.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsAgencyHouseTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.agency-house.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }


    // 4. Nhà bán thuộc SHNN
    public function getParadigmsHouseSellShnnTypePrice() {
        $paradigmId = 4;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.house-sell-shnn.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsHouseSellShnnTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsHouseSellShnnTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsHouseSellShnnTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsHouseSellShnnTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsHouseSellShnnTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.house-sell-shnn.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.house-sell-shnn.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsHouseSellShnnTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.house-sell-shnn.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }



    // 5. Chung cư 201 đống đa
    public function getParadigmsApartment201DongDaTypePrice() {
        $paradigmId = 5;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.apartment-201-dong-da.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsApartment201DongDaTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsApartment201DongDaTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsApartment201DongDaTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsApartment201DongDaTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsApartment201DongDaTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.apartment-201-dong-da.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.apartment-201-dong-da.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsApartment201DongDaTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.apartment-201-dong-da.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }



    // 6. Nhà ở công nhân
    public function getParadigmsWorkerHousingTypePrice() {
        $paradigmId = 6;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.worker-housing.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsWorkerHousingTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsWorkerHousingTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsWorkerHousingTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsWorkerHousingTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsWorkerHousingTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.worker-housing.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.worker-housing.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsWorkerHousingTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.worker-housing.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }


    
    // 7. Kí túc xá

    public function getParadigmsDorCollect(Request $request) {

        $collect = 0;

        $params = $request->all();

        $payMethods = $this->payMethodRepository->getLists();

        $type_prices = $this->typePriceRepository->getListByParadigmID($this->paradigm_id);

        $dors = $this->dorRepository->getDorByParadigmID($this->paradigm_id);

        if (isset($params['dormitory_id']) && isset($params['type_price_id'])) {

            $collect = 1;

        }

        return view('admins.paradigms.dors.amount-received.collect')->with([

            'dors' => $dors,
            'params' => $params,
            'url' => $this->url,
            'paradigm_id' => $this->paradigm_id,
            'payMethods' => $payMethods,
            'type_prices' => $type_prices,
            'collect' => $collect

        ]);

    }

    public function postParadigmsDorCollect(Request $request) {

        $account = Auth::guard('account')->user();

        $paradigm = $this->paradigmRepository->getById($this->paradigm_id);

        $params = $request->all();

        unset($params['_token']);
        unset($params['_method']);

        $params['account_id'] = $account->id;

        if (!isset($params['price_cash'])) {

            $params['price_cash'] = 0;

        } 

        if (!isset($params['price_transfer'])) {

            $params['price_transfer'] = 0;

        } 

        $params['sum_price_amount_received'] = $params['price_cash'] + $params['price_transfer'];


        $amount_in_words = convert_curency_to_words($params['sum_price_amount_received']);

        // kiểm tra loại phiếu xuất
        $type_receipt_id = $this->typePriceRepository->getById($params['type_price_id'])->type_receipt_id; 

        $params['type_receipt_id'] = $type_receipt_id;

        if ($type_receipt_id === 1) 
        {

            $params['number_bill_string'] = 'BL70'.($paradigm->receipt_number + 1);

            $params['number_bill_number'] = $paradigm->receipt_number + 1;

            $paradigm->receipt_number = $paradigm->receipt_number + 1;

            $paradigm->save();

        }
        else if ($type_receipt_id === 2) 
        {

            $params['number_bill_string'] = 'PT70'.($paradigm->number_bill + 1);

            $params['number_bill_number'] = $paradigm->number_bill + 1;

            $paradigm->number_bill = $paradigm->number_bill + 1;

            $paradigm->save();

        }
        else if ($type_receipt_id === 3)
        {

            $params['number_bill_string'] = 'HĐ70'.($paradigm->invoice_number + 1);

            $params['number_bill_number'] = $paradigm->invoice_number + 1;

            $paradigm->invoice_number = $paradigm->invoice_number + 1;

            $paradigm->save();

        }

        $amountReceived = $this->amountReceivedRepository->create($params);

        if ($amountReceived) {

            $params['amount_received_id'] = $amountReceived->id;

            $amountReceived7 = $this->amountReceived_7_Repository->create($params);

            Session::put('success', 'Thành công!');
            Session::save();

            return view('admins.paradigms.dors.receipt.bill')->with([

                'amountReceived7' => $amountReceived7,
                'amount_in_words' => $amount_in_words,
                'url' => $this->url,

            ]);

        }

        Session::put('error', 'Thất bại!');
        Session::save();

        return redirect()->back();

    }

    public function getParadigmsDorStatistical(Request $request) {

        $params = $request->all();

        $amountReceived_1_s = $this->amountReceived_7_Repository->getListByParams($params, $this->paradigm_id);

        $accounts = $this->accountRepository->getLists();

        $type_prices = $this->typePriceRepository->getListByParadigmID($this->paradigm_id);

        $apartments = $this->dorRepository->getDorByParadigmID($this->paradigm_id);

        return view('admins.paradigms.dors.amount-received.statistical')->with([

            'type_prices' => $type_prices,
            'url' => $this->url,
            'apartments' => $apartments,
            'accounts' => $accounts,
            'paradigm_id' => $this->paradigm_id,

            'params' => $params,
            'amountReceived_1_s' => $amountReceived_1_s,

        ]);

    }

    public function getParadigmsDorHistory(Request $request) {

        $params = $request->all();

        $amountReceived_1_s = $this->amountReceived_7_Repository->getListByParams($params, $this->paradigm_id);

        $accounts = $this->accountRepository->getLists();

        $type_prices = $this->typePriceRepository->getListByParadigmID($this->paradigm_id);

        $apartments = $this->dorRepository->getDorByParadigmID($this->paradigm_id);

        return view('admins.paradigms.dors.amount-received.history')->with([

            'type_prices' => $type_prices,
            'url' => $this->url,
            'apartments' => $apartments,
            'accounts' => $accounts,
            'paradigm_id' => $this->paradigm_id,

            'params' => $params,
            'amountReceived_1_s' => $amountReceived_1_s,

        ]);

    }

    public function getParadigmsDorTypePrice() {
        $paradigmId = 7;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.dors.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsDorTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsDorTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsDorTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsDorTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsDorTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.dors.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.dors.amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsDorTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.dors.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }

    public function postConfirmSendAccountantKTX(Request $request) {

        $params = $request->all();

        if (isset($params['ids']) && !empty($params['ids'])) {

            foreach ($params['ids'] as $key => $value) {
                
                $this->amountReceived_7_Repository->update($value, ['send_accountant' => 1]);

            }

        }

        return redirect()->back();
    }

    public function getParadigmsDorCollectEdit(Request $request) {

        $amountReceived_1_ = $this->amountReceived_7_Repository->getById($request->id);

        return view('admins.paradigms.dors.amount-received.modal_update_apartment')->with([
            'amountReceived_1_' => $amountReceived_1_,
            'paradigm_id' => $this->paradigm_id,
            'url' => $this->url
        ]);

    }

    public function postParadigmsDorCollectEdit($id, Request $request) {

        $amountReceived_1_ = $this->amountReceived_7_Repository->getById($id);

        $paradigm = $this->paradigmRepository->getById($this->paradigm_id);

        $params = [
            'household_information_id' => $amountReceived_1_->household_information_id,
            'type_price_id' => $amountReceived_1_->type_price_id,
            'pay_method_id' => $amountReceived_1_->pay_method_id,
            'dormitory_id' => $amountReceived_1_->dormitory_id,
            'sum_price_amount_received' => $amountReceived_1_->sum_price_amount_received,
            'address' => $amountReceived_1_->address,
            'rental_address' => $amountReceived_1_->rental_address,
            'apartment_number' => $amountReceived_1_->apartment_number,
            'content_bill_debt_month' => $request->content_bill_debt_month,
            'content_bill_debt_additional_arrears' => $amountReceived_1_->content_bill_debt_additional_arrears,
            'price_cash' => $amountReceived_1_->price_cash,
            'price_transfer' => $amountReceived_1_->price_transfer,
            'parent_id' => $amountReceived_1_->id,
            'account_id' => $amountReceived_1_->account_id,
            'account_id_for' => $amountReceived_1_->account_id_for,
            'paradigm_id' => $amountReceived_1_->paradigm_id,
            'send_accountant' => $amountReceived_1_->send_accountant,
            'district_id' => $amountReceived_1_->district_id,
            'ward_id' => $amountReceived_1_->ward_id,
            'apartment_id' => $amountReceived_1_->apartment_id,
            'room_id' => $amountReceived_1_->room_id,
            'amount_received_id' => $amountReceived_1_->amount_received_id,
            'status' => 1,
            'fullname' => $request->fullname,
            'type_receipt_id' => $amountReceived_1_->type_receipt_id,
        ];

        $type_receipt_id = $this->typePriceRepository->getById($amountReceived_1_->type_price_id)->type_receipt_id; 

        $params['type_receipt_id'] = $type_receipt_id;

        if ($type_receipt_id === 1) 
        {

            $params['number_bill_string'] = 'BL70'.($paradigm->receipt_number + 1);

            $params['number_bill_number'] = $paradigm->receipt_number + 1;

            $paradigm->receipt_number = $paradigm->receipt_number + 1;

            $paradigm->save();

        }
        else if ($type_receipt_id === 2) 
        {

            $amountReceived_1_ = $this->amountReceived_7_Repository->update($id, ['fullname' => $request->fullname, 'content_bill_debt_month' => $request->content_bill_debt_month,'status' => 1]);

            return redirect()->back();

        }
        else if ($type_receipt_id === 3)
        {

            $params['number_bill_string'] = 'HĐ70'.($paradigm->invoice_number + 1);

            $params['number_bill_number'] = $paradigm->invoice_number + 1;

            $paradigm->invoice_number = $paradigm->invoice_number + 1;

            $paradigm->save();

        }

        // create new 

        $amountReceived_1_new = $this->amountReceived_7_Repository->create($params);

        // update status old 

        $this->amountReceived_7_Repository->update($id, ['status' => 1, 'parent_id' => $amountReceived_1_new->id]);


        Session::put('success', 'Điều chỉnh thành công!');
        Session::save();

        return redirect()->back();

    }


    // 8. Thuê mặt bằng
    public function getParadigmsRentGroundTypePrice() {
        $paradigmId = 8;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.rent-ground.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsRentGroundTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsRentGroundTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsRentGroundTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsRentGroundTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsRentGroundTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.rent-ground.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.rent-ground-amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsRentGroundTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.rent-ground.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }


    // 9. Các khoản thu khác
    public function getParadigmsOtherAmountTypePrice() {
        $paradigmId = 9;
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate(5);
        $typeReceipts = $this->trRepo->getLists();
        return view('admins.paradigms.other-amount.amount-received.type-price.index', [
            'typePrices' => $typePrices,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function postParadigmsOtherAmountTypePrice(Request $req) {
        $params = $this->tpParams($req);
        $data = $this->tpRepo->createe($params);
        return response()->json($data);
    }

    public function editParadigmsOtherAmountTypePrice(TypePrice $typePrice) {
        $typeReceipts = $this->trRepo->getLists();
        return response()->json([
            'typePrice' => $typePrice,
            'typeReceipts' => $typeReceipts,
        ]);
    }

    public function updateParadigmsOtherAmountTypePrice(Request $req, TypePrice $typePrice) {
        $id = $typePrice->id;
        $params = $this->tpParams($req);
        $data = $this->tpRepo->updatee($id, $params);
        return response()->json($data);
    }

    public function destroyParadigmsOtherAmountTypePrice(TypePrice $typePrice) {
        $id = $typePrice->id;
        $data = $this->tpRepo->deletee($id);
        return response()->json($data);
    }

    public function fetchParadigmsOtherAmountTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $typePrices = $typePrices->paginate($req->numRow);
                return view('admins.paradigms.other-amount.amount-received.type-price.pagination', [
                    'typePrices' => $typePrices,
                ])->render();
            }
            $typePrices = $typePrices->paginate(5);
            return view('admins.paradigms.other-amount-amount-received.type-price.pagination', [
                'typePrices' => $typePrices,
            ])->render();
        }
    }

    public function getRowParadigmsOtherAmountTypePrice(Request $req) {
        $paradigmId = $req->get('paradigmId');
        $numRow = $req->get('numRow');
        $typePrices = $this->tpRepo->getListPaginateById($paradigmId)->paginate($numRow);
        return view('admins.paradigms.other-amount.amount-received.type-price.pagination', [
            'typePrices' => $typePrices,
        ])->render();
    }
}
