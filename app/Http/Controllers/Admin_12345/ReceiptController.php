<?php

namespace App\Http\Controllers\Admin_12345;

use Carbon\Carbon;
use App\Models_12345\Room;
use App\Models_12345\Block;
use App\Models_12345\Floor;
use Illuminate\Http\Request;
use App\Models_12345\Account;
use App\Models_12345\Product;
use App\Models_12345\Receipt;
use App\Imports\ReceiptImport;
use App\Models_12345\Apartment;
use App\Models_12345\Household;
use Illuminate\Support\Facades\DB;
use App\Models_12345\HouseholdRoom;
use App\Http\Controllers\Controller;
use App\Models_12345\PaidAmountAfterCal;
use Illuminate\Support\Facades\Validator;

class ReceiptController extends Controller
{
    public function index() {
        $apartments = Apartment::all();
        $receipts = Receipt::paginate(5);
        $accounts = Account::all();
        return view('admins.receipts.index', [
            'apartments' => $apartments,
            'receipts' => $receipts,
            'accounts' => $accounts,
        ]);
    }

    public function getApartment() {
        $apartments = Apartment::all();
        return view('admins.receipts.create', [
            'apartments' => $apartments,
        ]);
    }

    public function getBlock(Request $req) {
        $apartmentId = $req->get('apartmentId');
        $blocks = Block::all()->where('apartment_id', $apartmentId);
        return response()->json([
            'status' => 200,
            'blocks' => $blocks,
        ]);
    }

    public function getFloor(Request $req) {
        $blockId = $req->get('blockId');
        $floors = Floor::all()->where('block_id', $blockId);
        return response()->json([
            'status' => 200,
            'floors' => $floors,
        ]);
    }

    public function getRoom(Request $req) {
        $floorId = $req->get('floorId');
        $rooms = Room::all()->where('floor_id', $floorId);
        return response()->json([
            'status' => 200,
            'rooms' => $rooms,
        ]);
    }

    public function getHousehold(Request $req) {
        $roomId = $req->get('roomId');
        $householdId = HouseholdRoom::where('room_id', $roomId)->value('household_id');
        $household = DB::table('households')->where('id', $householdId)->get();

        if($household->count() > 0) {
            return response()->json([
                'status' => 200,
                'household' => $household,
            ]);
        } else {
            return response()->json([
                'status' => 400,
                'message' => 'Không có hộ dân ở căn hộ này',
            ]);
        }
    }

    public function store(Request $req) {
        $data = array();
        $productArr = $req->get('productArr');
        
        $roomId = $req->get('room');
        $householdRoomId = HouseholdRoom::where('room_id', $roomId)->value('id');

        $isExists = Receipt::where('receipt_no', $req->get('receiptNo'))->first();
        if($isExists) {
            $data['status'] = 400;
            $data['message'] = 'Hóa đơn này đã tồn tại';
        } else {
            $receipt = new Receipt;
            $receipt->form_no = $req->get('formNo');
            $receipt->serial_no = $req->get('serialNo');
            $receipt->receipt_no = $req->get('receiptNo');
            $receipt->send_mail_to_customer = $req->get('sendMailToCustomer');
            $receipt->date_created = Carbon::now();
            // $receipt->creator = Auth::user()->username;
            $receipt->status = 0;
            $receipt->bank_no = $req->get('bankNo');
            $receipt->bank_name = $req->get('bankName');
            $receipt->pay_method = $req->get('payMethod');
            $receipt->apartment_id = $req->get('apartment');
            $receipt->block_id = $req->get('block');
            $receipt->floor_id = $req->get('floor');
            $receipt->room_id = $req->get('room');
            $receipt->household_room_id = $householdRoomId;
            $receipt->save();

            if($productArr != null) {
                foreach($productArr as $productItem) {
                    $product = new Product;
                    $product->name = $productItem[0];
                    $product->unit = $productItem[1];
                    $product->quantity = $productItem[2];
                    $product->price = $productItem[3];
                    $product->total = str_replace('.', '', $productItem[4]);
                    $product->receipt_id = $receipt->id;
                    $product->save();
                }
        
                $paidAmountAfterCal = new PaidAmountAfterCal;
                $paidAmountAfterCal->total_before_tax = $req->get('totalBeforeTax');
                $paidAmountAfterCal->vat_tax = $req->get('vatTax');
                $paidAmountAfterCal->total_tax = $req->get('totalTax');
                $paidAmountAfterCal->total_after_tax = $req->get('totalAfterTax');
                $paidAmountAfterCal->receipt_id = $receipt->id;
                $paidAmountAfterCal->save();
            }
            $data['status'] = 200;
            $data['message'] = 'Tạo Hóa đơn thành công';
        }
        return response()->json($data);
    }

    public function show($id) {
        // $receipt = Receipt::all()->where('id', $req->receiptId);
        $receipt = Receipt::findOrFail($id);
        // $householdRoomId = Receipt::whereId($id)->value('id');
        // $householdId = HouseholdRoom::whereId($householdRoomId)->value('household_id');
        // $household = Household::all()->where('id', $householdId)->first();
        $customerName = $receipt->householdRoom->household->fullname;
        $room = $receipt->householdRoom->room->name;
        $floor = $receipt->householdRoom->room->floor->number;
        $block = $receipt->householdRoom->room->floor->block->name;
        $apartment = $receipt->householdRoom->room->floor->block->apartment->name;

        $productArr = Product::where('receipt_id', $id)->get();

        $paidAmountAfterCal = PaidAmountAfterCal::all()->where('receipt_id', $id)->first();
        
        if(!$receipt) {
            return response()->json([
                'status' => 404,
                'message' => 'Không tìm thấy hóa đơn này',
            ]);
        } else {
            return response()->json([
                'status' => 200,
                'receipt' => $receipt,
                'customerName' => $customerName,
                'room' => $room,
                'floor' => $floor,
                'block' => $block,
                'apartment' => $apartment,
                'productArr' => $productArr,
                'paidAmountAfterCal' => $paidAmountAfterCal,
            ]);
        }
    }

    public function edit($id) {
        $receipt = Receipt::where('status', 0)->findOrFail($id);
        $apartments = Apartment::all();
        $blocks = Block::all()->where('apartment_id', $receipt->householdRoom->room->floor->block->apartment->id);
        $floors = Floor::all()->where('block_id', $receipt->householdRoom->room->floor->block->id);
        $rooms = Room::all()->where('floor_id', $receipt->householdRoom->room->floor->id);
        // $household = Household::all()->where('id', $receipt->householdRoom->household->id)->first();
        $products = Product::all()->where('receipt_id', $receipt->id);
        $paidAmountAfterCal = PaidAmountAfterCal::all()->where('receipt_id', $receipt->id)->first();
        return view('admins.receipts.edit', [
            'receipt' => $receipt,
            'apartments' => $apartments,
            'blocks' => $blocks,
            'floors' => $floors,
            'rooms' => $rooms,
            // 'household' => $household,
            'products' => $products,
            'paidAmountAfterCal' => $paidAmountAfterCal,
        ]);
    }

    public function update(Receipt $receipt, Request $req) {
        // $receiptId = $req->get('receiptId');
        // $receipt = Receipt::findOrFail($receiptId);

        $data = array();
        $productArr = $req->get('productArr');
        $productIdArr = $req->get('productIdArr');
        if($productArr == null) {
            if($productIdArr != null) {
                Product::whereIn('id', $productIdArr)->delete();
                PaidAmountAfterCal::where('receipt_id', $receipt->id)->delete();
            }
        }

        $roomId = $req->get('room');
        $householdRoomId = HouseholdRoom::where('room_id', $roomId)->value('id');
        $exceptReceiptNo = Receipt::where('id', $req->get('receiptId'))->value('receipt_no');
        $isExists = Receipt::where('receipt_no', $req->get('receiptNo'))->whereNotIn('receipt_no', [$exceptReceiptNo])->first();
        if($isExists) {
            $data['status'] = 400;
            $data['message'] = 'Hóa đơn này đã tồn tại';
        } else {
            $receipt->update([
                'form_no' => $req->get('formNo'),
                'serial_no' => $req->get('serialNo'),
                'receipt_no' => $req->get('receiptNo'),
                'send_mail_to_customer' => $req->get('sendMailToCustomer'),
                'date_created' => Carbon::now(),
                // 'creator' => Auth::user()->username,
                'apartment_id' => $req->get('apartment'),
                'block_id' => $req->get('block'),
                'floor_id' => $req->get('floor'),
                'room_id' => $req->get('room'),
                'status' => 0,
                'bank_no' => $req->get('bankNo'),
                'bank_name' => $req->get('bankName'),
                'pay_method' => $req->get('payMethod'),
                'household_room_id' => $householdRoomId,
            ]); 
            
            if($productArr != null) {
                if($productIdArr != null) {
                    Product::whereIn('id', $productIdArr)->delete();
                    PaidAmountAfterCal::where('receipt_id', $receipt->id)->delete();
                }
                foreach($productArr as $productItem) {
                    $product = new Product;
                    $product->name = $productItem[0];
                    $product->unit = $productItem[1];
                    $product->quantity = $productItem[2];
                    $product->price = $productItem[3];
                    $product->total = str_replace('.', '', $productItem[4]);
                    $product->receipt_id = $receipt->id;
                    $product->save();
                }
    
                $paidAmountAfterCal = new PaidAmountAfterCal;
                $paidAmountAfterCal->total_before_tax = $req->totalBeforeTax;
                $paidAmountAfterCal->vat_tax = $req->vatTax;
                $paidAmountAfterCal->total_tax = $req->totalTax;
                $paidAmountAfterCal->total_after_tax = $req->totalAfterTax;
                $paidAmountAfterCal->receipt_id = $receipt->id;
                $paidAmountAfterCal->save();
    
                // $paidAmountAfterCal = PaidAmountAfterCal::all()->where('receipt_id', $receipt->id)->first();
                // $paidAmountAfterCal->update([
                //     'total_before_tax' => $req->totalBeforeTax,
                //     'vat_tax' => $req->vatTax,
                //     'total_tax' => $req->totalTax,
                //     'total_after_tax' => $req->totalAfterTax,
                // ]);
            }
            $data['status'] = 200;
            $data['message'] = 'Cập nhật Hóa đơn thành công';
        }
        return response()->json($data);
    }

    public function destroy(Receipt $receipt) {
        $receipt->delete();
        Product::where('receipt_id', $receipt->id)->delete();
        PaidAmountAfterCal::where('receipt_id', $receipt->id)->delete();
        return response()->json([
            'status' => 200,
            'message' => 'Đã xóa Hóa đơn thành công',
        ]);
    }

    public function search(Request $req) {
        $formNo = $req->get('formNo');
        $serialNo = $req->get('serialNo');
        $receiptNo = $req->get('receiptNo');
        $status = $req->get('status');
        $dateCreated = $req->get('dateCreated');
        $creator = $req->get('creator');
        $apartmentId = $req->get('apartment');
        $blockId = $req->get('block');
        $floorId = $req->get('floor');
        $roomId = $req->get('room');
        $phoneNumber = $req->get('customerPhoneNumber');

        $householdId = Household::where('phone_number', $phoneNumber)->value('id');
        $householdRoomId = HouseholdRoom::where('household_id', $householdId)->value('id');
        $receipts = Receipt::where('household_room_id', 'like', '%'.$householdRoomId.'%')
                            ->where('form_no', 'like', '%'.$formNo.'%')
                            ->where('serial_no', 'like', '%'.$serialNo.'%')
                            ->where('receipt_no', 'like', '%'.$receiptNo.'%')
                            ->where('status', 'like', '%'.$status.'%')
                            ->where('date_created', 'like', '%'.$dateCreated.'%')
                            ->where('creator', 'like', '%'.$creator.'%')
                            ->where('apartment_id', 'like', '%'.$apartmentId.'%')
                            ->where('block_id', 'like', '%'.$blockId.'%')
                            ->where('floor_id', 'like', '%'.$floorId.'%')
                            ->where('room_id', 'like', '%'.$roomId.'%')
                            ->paginate();
        return view('admins.receipts.pagination', [
            'receipts' => $receipts,
        ])->render();
    }

    public function fetch(Request $req) {
        $apartments = Apartment::all();
        $accounts = Account::all();
        if($req->ajax()) {
            if($req->numRow > 0) {
                $receipts = Receipt::paginate($req->numRow);
                return view('admins.receipts.pagination', [
                    'receipts' => $receipts,
                    'apartments' => $apartments,
                    'accounts' => $accounts,
                ])->render();
            }
            $receipts = Receipt::paginate(5);
            return view('admins.receipts.pagination', [
                'receipts' => $receipts,
                'apartments' => $apartments,
                'accounts' => $accounts,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $apartments = Apartment::all();
        $accounts = Account::all();
        $receipts = Receipt::paginate($numRow);
        return view('admins.receipts.pagination', [
            'receipts' => $receipts,
            'apartments' => $apartments,
            'accounts' => $accounts,
        ])->render();
    }

    public function destroyMany(Request $req) {
        $allIds = $req->get('allIds');
        Receipt::whereIn('id', $allIds)->delete();
        return response()->json([
            'status' => 200,
            'message' => 'Đã xóa Hóa đơn thành công!',
        ]);
    }

    public function destroyUnsigned(Request $req) {
        $data = array();
        $query = Receipt::where('status', 0)->delete();
        if($query > 0) {
            $data['status'] = 200;
            $data['message'] = 'Đã xóa Hóa đơn thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Không có Hóa đơn nào chưa ký';
        }
        return response()->json($data);
    }

    public function importExcel(Request $req) {
        $data = array();
        
        $validator = Validator::make($req->all(), [
            'file' => 'required|mimes:xlsx,csv,ods',
        ]);
        if($validator->fails()) {
            $data['status'] = 0;
            $data['error'] = $validator->errors()->first('file');
        } else {
            if($req->file('file')) {
                $file = $req->file('file');
                $fileName = time().'.'.$file->getClientOriginalExtension();
                $file->storeAs('excel_file_imported/receipt', $fileName, 'public');
                $import = new ReceiptImport;
                $import->import($file);
                $data['status'] = 200;
                $data['message'] = 'Đã Import file Excel thành công';
            } else {
                $data['status'] = 400;
                $data['message'] = 'Lỗi Import';
            }
        }
        return response()->json($data);
    }
}
