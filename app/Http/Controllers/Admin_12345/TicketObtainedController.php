<?php

namespace App\Http\Controllers\Admin_12345;

use Exception;
use SoapClient;
use Carbon\Carbon;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models_12345\TicketType;
use App\Http\Controllers\Controller;
use App\Models_12345\BillIssued;
use App\Repositories\ApiVnptRepository;
use App\Repositories\BillIssuedRepository;
use App\Repositories\TicketObtainedRepository;

class TicketObtainedController extends Controller
{
    protected $toRepo;
    protected $biRepo;
    protected $apiRepo;
    public function __construct(TicketObtainedRepository $toRepo, BillIssuedRepository $biRepo, 
                                ApiVnptRepository $apiRepo) {
        $this->toRepo = $toRepo;
        $this->biRepo = $biRepo;
        $this->apiRepo = $apiRepo;
    }

    public function uniqueCode() {
        $randNumber = mt_rand(00000, 99999);
        $randText = Str::random(40);
        $uniqueCode = Carbon::now()->format('Ymd').'_'.$randNumber.'_'.$randText;
        return $uniqueCode;
    }

    public function index() {
        $tickets = $this->toRepo->getSoldTickets()->paginate(5);
        $ticketTypes = $this->toRepo->getTicketTypesOnSale();
        return view('admins.tickets.sale.index', [
            'tickets' => $tickets,
            'ticketTypes' => $ticketTypes,
        ]);
    }

    public function getStatistic() {
        $today = Carbon::now()->format('Y-m-d');
        $ticketsSoldWithinTheDay = $this->toRepo->getStatistic('ticket_status_id', 1, $today);
        $invoiceCreatedWithinTheDay = $ticketsSoldWithinTheDay;
        $invoiceIssuedWithinTheDay = $this->toRepo->getStatistic('invoice_status_id', 1, $today);
        $invoiceCanceledWithinTheDay = $this->toRepo->getStatistic('invoice_status_id', 2, $today);
        return view('admins.tickets.statistic.index', [
            'ticketsSoldWithinTheDay' => $ticketsSoldWithinTheDay,
            'invoiceCreatedWithinTheDay' => $invoiceCreatedWithinTheDay,
            'invoiceIssuedWithinTheDay' => $invoiceIssuedWithinTheDay,
            'invoiceCanceledWithinTheDay' => $invoiceCanceledWithinTheDay,
        ]);
    }

    public function create() {
    }
    
    public function store(Request $req) {
        $data = array();
        $ticketInfor = $req->get('ticketInfor');
        // $ticketTypeId = $req->get('ticketTypeId');
        // $ticketType = $req->get('ticketType');
        // $vexemayPrice = $req->get('vexemayPrice');
        // $quantity = $req->get('quantity');

        $ids = $req->get('ids');
        // return response()->json(['test' => $ids]);
        // $quantities = $req->get('quantities');

        // $ticketType = TicketType::all()->where('id', $ticketTypeId)->first();

        // for($i = 1; $i <= $quantity; $i++) {
        //     $randNumber = mt_rand(0000000000, 9999999999);
        //     $randText = Str::random(40);
        //     $uniqueCode = Carbon::now()->format('Ymd').$randNumber.'_'.$randText;

        //     $ticketObtained = new TicketObtained;
        //     $ticketObtained->ticket_code = $uniqueCode;
        //     $ticketObtained->ticket_infor = $ticketInfor;
        //     $ticketObtained->ticket_issuing_time = Carbon::now();
        //     $ticketObtained->ticket_type_id = $ticketTypeId;
        //     $ticketObtained->ticket_status_id = 1;
        //     $ticketObtained->invoice_status_id = 1;
        //     $ticketObtained->save();
        //     try {
        //         $soapClient = new SoapClient('https://eticketvnpt-tt78admindemo.vnpt-invoice.com.vn/PublishService.asmx?wsdl');
        //         $param = array(
        //             'Account' => 'eticketvnptadmin',
        //             'ACpass' => 'Einv@oi@vn#pt20',
        //             'xmlInvData' => '
        //                 <Invoices>
        //                     <Inv>
        //                         <key>'.$uniqueCode.'</key>
        //                         <Invoice>
        //                             <CusCode>'.$uniqueCode.'</CusCode>
        //                             <CusName>'.$ticketInfor.'</CusName>
        //                             <CusAddress>Thành phố Đà Nẵng</CusAddress>
        //                             <PaymentMethod>Chuyển khoản</PaymentMethod>
        //                             <KindOfService>9</KindOfService>
        //                             <Products>
        //                                 <Product>
        //                                     <ProdName>'.$ticketType.'</ProdName>
        //                                     <Total>10000</Total>
        //                                     <VATRate>0</VATRate>
        //                                     <VATAmount>0</VATAmount>
        //                                     <Amount>'.$vexemayPrice.'</Amount>
        //                                     <IsSum>0</IsSum>
        //                                 </Product>
        //                             </Products>
        //                             <Total>10000</Total>
        //                             <VATRate>0</VATRate>
        //                             <VATAmount>0</VATAmount>
        //                             <Amount>'.$vexemayPrice.'</Amount>
        //                             <AmountInWords>VND</AmountInWords>
        //                             <Buyer>'.$ticketInfor.'</Buyer>
        //                             <Name>Tên hóa đơn</Name>
        //                             <Fkey>'.$uniqueCode.'</Fkey>
        //                             <CurrencyUnit>VND</CurrencyUnit>
        //                         </Invoice>
        //                     </Inv>
        //                 </Invoices>
        //             ',
        //             'username' => 'demoservice',
        //             'password' => '123456aA@',
        //             'pattern' => '5/001',
        //             'serial' => 'C22GAA',
        //             'convert' => 0,
        //         );
        //         $message = $soapClient->ImportAndPublishInv($param);
        //         $data['status'] = 200;
        //         $data['message'] = $message;
        //     } catch(Exception $ex) {
        //         $data['status'] = 400;
        //         $data['message'] = $ex->getMessage();
        //     }
        // }

        foreach($ids as $item) {
            $ticket = TicketType::where('id', $item['id'])->first();
            $type = $ticket->type;
            $price = $ticket->price;
            $pattern = $ticket->pattern;
            $serial = $ticket->serial;

            for($i = 1; $i <= $item['quantity']; $i++) {
                $uniqueCode = $this->uniqueCode();
                $ticketTypeInfor = $this->toRepo->getTicketTypeInforById($item['id']);
                $params = [
                    'ticket_name' => $ticketTypeInfor['name'],
                    'ticket_price' => $ticketTypeInfor['price'],
                    'ticket_infor' => $ticketInfor,
                    'ticket_issuing_time' => Carbon::now(),
                    'ticket_status_id' => 1,
                    'invoice_status_id' => 1,
                ];
                $this->toRepo->create($params);
                $params2 = [
                    'name' => $type,
                    'price' => $price,
                    'issuing_time' => Carbon::now(),
                    'invoice_status_id' => 1,
                    'pattern' => $pattern,
                    'serial' => $serial,
                    'fkey' => $uniqueCode,
                    'cus_code' => $uniqueCode,
                    'cus_name' => $ticketInfor,
                ];
                $this->biRepo->create($params2);
                $data = $this->apiRepo->publish($uniqueCode, $ticketInfor, $type, $price, $pattern, $serial);
            }
        }
        return response()->json($data);
    }

    public function show($id) {
        
    }

    public function edit($id) {
        
    }

    public function update(Request $req, $id) {
        
    }

    public function destroy($id) {
        
    }

    public function fetch(Request $req) {
        $search = $req->get('search');
        $tickets = $this->toRepo->getSoldTickets();
        if($search != '')
            $tickets = $this->toRepo->searchSoldTickets($search);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $tickets = $tickets->paginate($req->numRow);
                return view('admins.tickets.sale.pagination', [
                    'tickets' => $tickets,
                ])->render();
            }
            $tickets = $tickets->paginate(5);
            return view('admins.tickets.sale.pagination', [
                'tickets' => $tickets,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $search = $req->get('search');
        $tickets = $this->toRepo->getSoldTickets();
        if($search != '')
            $tickets = $this->toRepo->searchSoldTickets($search);
        $tickets = $tickets->paginate($numRow);
        return view('admins.tickets.sale.pagination', [
            'tickets' => $tickets,
        ])->render();
    }

    public function search(Request $req) {
        $search = $req->get('search');
        $tickets = $this->toRepo->searchSoldTickets($search);
        $tickets = $tickets->paginate();
        return view('admins.tickets.sale.pagination', [
            'tickets' => $tickets,
        ])->render();;
    }

    public function confirmReplaceBill(Request $req, BillIssued $bill) {
        $data = array();
        $cusName = $req->get('cusName');
        $productName = $req->get('productName');
        $price = $req->get('price');
        $id = $bill->id;
        $fkey = $bill->fkey;
        $pattern = $bill->pattern;
        $serial = $bill->serial;
        $uniqueCode = $this->uniqueCode();
        $data = $this->apiRepo->replace($fkey, $uniqueCode, $cusName, $productName, $price, $pattern, $serial);
        if($data['status'] == 200) {
            $paramsCreate = [
                'name' => $productName,
                'price' => $price,
                'issuing_time' => Carbon::now(),
                'invoice_status_id' => 4,
                'pattern' => $pattern,
                'serial' => $serial,
                'fkey' => $uniqueCode,
                'cus_code' => $uniqueCode,
                'cus_name' => $cusName,
            ];
            $this->biRepo->update($id, ['invoice_status_id' => 5,]);
            $this->biRepo->create($paramsCreate);
        }
        return response()->json($data);
    }

    public function confirmAdjustBill(Request $req, BillIssued $bill) {
        $data = array();
        $adjustType = $req->get('adjustType');
        $adjustPrice = $req->get('adjustPrice');
        if($adjustPrice === null) $adjustPrice = $bill->price;
        $adjustCusName = $req->get('adjustCusName');
        if($adjustCusName === null) $adjustCusName = $bill->cus_name;
        $adjustProductName = $req->get('adjustProductName');
        if($adjustProductName === null) $adjustProductName = $bill->name;
        $id = $bill->id;
        $fkey = $bill->fkey;
        $pattern = $bill->pattern;
        $serial = $bill->serial;
        $uniqueCode = $this->uniqueCode();
        $data = $this->apiRepo->adjust($fkey, $uniqueCode, $adjustCusName, $adjustProductName, $adjustPrice, $adjustType, $pattern, $serial);
        if($data['status'] == 200) {
            $paramsCreate = [
                'name' => $adjustProductName,
                'price' => $adjustPrice,
                'issuing_time' => Carbon::now(),
                'invoice_status_id' => 3,
                'pattern' => $pattern,
                'serial' => $serial,
                'fkey' => $uniqueCode,
                'cus_code' => $uniqueCode,
                'cus_name' => $adjustCusName,
            ];
            $this->biRepo->update($id, ['invoice_status_id' => 2,]);
            $this->biRepo->create($paramsCreate);
        }
        return response()->json($data);
    }

    public function confirmCancelBill(BillIssued $bill) {
        $data = array();
        $id = $bill->id;
        $fkey = $bill->fkey;
        $data = $this->apiRepo->cancel($fkey);
        if($data['status'] == 200)
            $this->biRepo->update($id, ['invoice_status_id' => 5,]);
        return response()->json($data);
    }
}
