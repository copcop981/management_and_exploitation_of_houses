<?php

namespace App\Http\Controllers\Admin_12345;

use App\Models_12345\Room;
use App\Models_12345\Block;
use App\Models_12345\Floor;
use Illuminate\Http\Request;
use App\Models_12345\Apartment;
use Illuminate\Support\Facades\DB;
use App\Http\Controllers\Controller;
use App\Models_12345\ResidentObject;
use App\Repositories\ApartmentRepository;

class ApartmentController extends Controller
{
    protected $apartmentRepo;
    public function __construct(ApartmentRepository $apartmentRepo) {
        $this->apartmentRepo = $apartmentRepo;
    }

    public function index() {
        $apartments = Apartment::paginate(5);
        $blocks = Block::all();
        $floors = Floor::all();
        $rooms = Room::all();
        return view('admins.categories.apartment.index', [
            'apartments' => $apartments,
            'blocks' => $blocks,
            'floors' => $floors,
            'rooms' => $rooms,
        ]);
    }

    public function getListBlockToModal() {
        $data = $this->apartmentRepo->getList_3_1_ToModal(new Block, 'blocks');
        return response()->json($data);
    }

    public function getListFloorToModal() {
        $data = $this->apartmentRepo->getList_3_1_ToModal(new Floor, 'floors');
        return response()->json($data);
    }

    public function getListRoomToModal() {
        $data = $this->apartmentRepo->getList_3_1_ToModal(new Room, 'rooms');
        return response()->json($data);
    }

    public function getBlock(Request $req) {
        $apartmentName = $req->get('apartmentName');
        $apartmentId = $this->apartmentRepo->getIdFromApartmentName($apartmentName);
        $blocks = Block::where('apartment_id', $apartmentId)->get();
        return response()->json([
            'status' => 200,
            'blocks' => $blocks,
        ]);
    }

    public function getFloor(Request $req) {
        $apartmentName = $req->get('apartmentName');
        $blockName = $req->get('blockName');
        $blockId = $this->apartmentRepo->getBlockIdFromApartment($apartmentName, $blockName);
        $floors = Floor::where('block_id', $blockId)->get();
        return response()->json([
            'status' => 200,
            'floors' => $floors,
        ]);
    }

    public function getRoom(Request $req) {
        $apartmentName = $req->get('apartmentName');
        $blockName = $req->get('blockName');
        $floorName = $req->get('floorName');
        $floorId = $this->apartmentRepo->getFloorIdFromBlock($apartmentName, $blockName, $floorName);
        $rooms = Room::where('floor_id', $floorId)->where('status', 0)->get();
        return response()->json([
            'status' => 200,
            'rooms' => $rooms,
        ]);
    }

    public function getRoomId(Request $req) {
        $roomId = $this->apartmentRepo->getRoomIdFromRoom($req->get('apartmentName'), $req->get('blockName'), $req->get('floorName'), $req->get('roomName'));
        return response()->json([
            'status' => 200,
            'roomId' => $roomId,
        ]);
    }

    public function create() {
    }

    public function store(Request $req) {
        $query = 0;
        $name = $req->get('name');
        $listBlockName = $req->get('listBlockName');
        $listFloorName = $req->get('listFloorName');
        $listRoomName = $req->get('listRoomName');

        $existsApartment = Apartment::all()->where('name', $name)->count();
        $data = $this->apartmentRepo->validate3($listBlockName, $listFloorName, $listRoomName, $existsApartment);
        if(!$data) {
            $apartment = new Apartment;
            $apartment->name = $name;
            $query = $apartment->save();
            $data = $this->apartmentRepo->store3($listBlockName, $listFloorName, $listRoomName, $apartment->id, $query, 'Tạo');
        }
        return response()->json($data);
    }

    public function storeBlock(Request $req) {
        $name = $req->get('name');
        $data = $this->apartmentRepo->store_3_1(new Block, $name, 'Nhà');
        return response()->json($data);
    }

    public function storeFloor(Request $req) {
        $name = $req->get('name');
        $data = $this->apartmentRepo->store_3_1(new Floor, $name, 'Tầng');
        return response()->json($data);
    }

    public function storeRoom(Request $req) {
        $name = $req->get('name');
        $data = $this->apartmentRepo->store_3_1(new Room, $name, 'Căn hộ');
        return response()->json($data);
    }

    public function storeResidentObject(Request $req) {
        $data = array();
        $name = $req->get('name');
        $exists = ResidentObject::all()->where('title', $name)->count();
        if($exists > 0) {
            $data['status'] = 400;
            $data['message'] = 'Đối tượng này đã tồn tại';
        } else {
            ResidentObject::create([ 'title' => $name, ]);
            $data['status'] = 200;
            $data['message'] = 'Tạo mới Đối tượng thành công';
        }
        return response()->json($data);
    }

    public function show(Apartment $apartment) {
        $data = $this->apartmentRepo->filterList_3_1_OfDependence($apartment);
        return response()->json($data);
    }

    public function edit(Apartment $apartment) {
        $blocks = Block::select('name')->groupBy('name')->get();
        $floors = Floor::select('name')->groupBy('name')->get();
        $rooms = Room::select('name')->groupBy('name')->get();

        $data1 = $this->apartmentRepo->filterList_3_1_OfDependence($apartment);
        $data2 = [
            'blocks' => $blocks,
            'floors' => $floors,
            'rooms' => $rooms,
        ];
        $data = array_merge($data1, $data2);
        return response()->json($data);
    }

    public function update(Request $req, Apartment $apartment) {
        $query = 0;
        $id = $req->get('id');
        $name = $req->get('name');
        $listBlockName = $req->get('listBlockName');
        $listFloorName = $req->get('listFloorName');
        $listRoomName = $req->get('listRoomName');

        // $exceptApartment = Apartment::where('id', $apartment->id)->value('name');

        // $existsApartment = Apartment::where('name', $name)->whereNotIn('name', [$apartment->name])->first();
        // $data = $this->apartmentRepo->validate3($listBlockName, $listFloorName, $listRoomName, $existsApartment);
        // if(!$data) {
        //     Block::where('apartment_id', $id)->delete();
        //     Floor::where('apartment_id', $id)->delete();
        //     Room::where('apartment_id', $id)->delete();
        //     $query = $apartment->update([
        //         'name' => $name,
        //     ]);
        //     $data = $this->apartmentRepo->store3($listBlockName, $listFloorName, $listRoomName, $id, $query, 'Cập nhật');
        // }

        $apartment->update([
            'name' => $name,
        ]);
        // if(count($listFloorName) >= $listFloor->count()) {
        //     foreach($listFloorName as $floorName) {
        //         $floors = Floor::where('name', $floorName)->where('apartment_id', $id);
        //         if($floors->count() == 0) {
        //             $floor = new Floor;
        //             $floor->name = $floorName;
        //             $floor->apartment_id = $id;
        //             $floor->block_id = $block->id;
        //             $floor->save();
        //         } else {
        //             $floors->update([
        //                 'name' => $floorName,
        //                 'apartment_id' => $id,
        //                 'block_id' => $block->id,
        //             ]);
        //         }
        //     }
        // } else {
        //     foreach($listFloor as $item) {
        //         if(!in_array($item->name, $listFloorName)) {
        //             Floor::where('name', $item->name)->where('apartment_id', $id)->delete();
        //         }
        //     }
        // }

        $data = array();
        $listBlock = Block::all()->where('apartment_id', $id);
        $listFloor = Floor::all()->where('apartment_id', $id);
        if(count($listBlockName) >= $listBlock->count()) {
            foreach($listBlockName as $blockName) {
                $blocks = Block::where('name', $blockName)->where('apartment_id', $id);
                if($blocks->count() == 0) {
                    $block = new Block;
                    $block->name = $blockName;
                    $block->apartment_id = $id;
                    $block->save();
                } else {
                    $block = $blocks->update([
                        'name' => $blockName,
                        'apartment_id' => $id,
                    ]);
                }
            }
            $data['status'] = 200;
            $data['message'] = 'OK';
        } else {
            foreach($listBlock as $item) {
                if(!in_array($item->name, $listBlockName)) {
                    Block::where('name', $item->name)->where('apartment_id', $id)->delete();
                }
            }
            $data['status'] = 400;
            $data['message'] = 'KO';
        }
        return response()->json($data);
    }

    public function destroy(Apartment $apartment) {
        $data = array();
        $query = 0;
        $query2 = 0;
        $query3 = 0;
        $query4 = 0;
        $query = $apartment->delete();
        $query2 = Block::where('apartment_id', $apartment->id)->delete();
        $query3 = Floor::where('apartment_id', $apartment->id)->delete();
        $query4 = Room::where('apartment_id', $apartment->id)->delete();
        if($query > 0 && $query2 > 0 && $query3 > 0 && $query4 > 0) {
            $data['status'] = 200;
            $data['message'] = 'Đã xóa thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Xóa không thành công';
        }
        return response()->json($data);
    }

    public function deleteMany(Request $req) {
        $data = array();
        $allIds = $req->get('allIds');
        $query = 0;
        $query2 = 0;
        $query3 = 0;
        $query4 = 0;
        $query = Apartment::whereIn('id', $allIds)->delete();
        $query2 = Block::whereIn('apartment_id', $allIds)->delete();
        $query3 = Floor::whereIn('apartment_id', $allIds)->delete();
        $query4 = Room::whereIn('apartment_id', $allIds)->delete();
        if($query > 0 && $query2 > 0 && $query3 > 0 && $query4 > 0) {
            $data['status'] = 200;
            $data['message'] = 'Đã xóa thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Xóa không thành công';
        }
        return response()->json($data);
    }

    public function fetch(Request $req) {
        $blocks = Block::all();
        $floors = Floor::all();
        $rooms = Room::all();
        if($req->ajax()) {
            if($req->numRow > 0) {
                $apartments = Apartment::paginate($req->numRow);
                return view('admins.categories.apartment.pagination', [
                    'apartments' => $apartments,
                    'blocks' => $blocks,
                    'floors' => $floors,
                    'rooms' => $rooms,
                ])->render();
            }
            $apartments = Apartment::paginate(5);
            return view('admins.categories.apartment.pagination', [
                'apartments' => $apartments,
                'blocks' => $blocks,
                'floors' => $floors,
                'rooms' => $rooms,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $apartments = Apartment::paginate($numRow);
        $blocks = Block::all();
        $floors = Floor::all();
        $rooms = Room::all();
        return view('admins.categories.apartment.pagination', [
            'apartments' => $apartments,
            'blocks' => $blocks,
            'floors' => $floors,
            'rooms' => $rooms,
        ])->render();
    }

    public function search(Request $req) {
        $apartmentName = $req->get('apartmentName');
        // $qlvName = $req->get('qlvName');
        // $accountant_id = Qlv::where('fullname', $qlvName)->value('accountant_id');
        // $accountants = Accountant::where('fullname', $accountantName)->orWhere('id', $accountant_id)->paginate();
        $apartments = Apartment::where('name', $apartmentName)->paginate();
        $blocks = Block::all();
        $floors = Floor::all();
        $rooms = Room::all();
        return view('admins.categories.apartment.pagination', [
            'apartments' => $apartments,
            'blocks' => $blocks,
            'floors' => $floors,
            'rooms' => $rooms,
        ])->render();
    }
}
