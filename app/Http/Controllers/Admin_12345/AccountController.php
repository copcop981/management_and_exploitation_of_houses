<?php

namespace App\Http\Controllers\Admin_12345;

use App\Models\Account;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Repositories\AccountRepository;
use Illuminate\Support\Facades\Validator;

class AccountController extends Controller
{
    protected $accountRepo;
    public function __construct(AccountRepository $accountRepo) {
        $this->accountRepo = $accountRepo;
    }

    public function index() {
        $accounts = $this->accountRepo->getListPaginates(5);
        return view('admins.manage-accounts.list.index', [
            'accounts' => $accounts,
        ]);
    }

    public function create() {
        
    }

    public function store(Request $req) {
        $data = array();
        $fullname = $req->get('fullname');
        $username = $req->get('username');
        $password = $req->get('password');
        $email = $req->get('email');
        $phoneNumber = $req->get('phoneNumber');
        $params = [
            'fullname' => $fullname,
            'username' => $username,
            'password' => Hash::make($password),
            'email' => $email,
            'phone_number' => $phoneNumber,
        ];
        $query = $this->accountRepo->create($params);
        if($query !== null) {
            $data['status'] = 0;
            $data['message'] = 'Tạo tài khoản mới thành công';
        } else {
            $data['status'] = 1;
            $data['message'] = 'Tạo thất bại';
        }
        return response()->json($data);
    }

    public function show($id) {
        
    }

    public function edit($id) {
        $account = $this->accountRepo->getById($id);
        return response()->json(['account' => $account]);
    }

    public function update(Request $req, $id) {
        $data = array();
        $fullname = $req->get('fullname');
        $email = $req->get('email');
        $phoneNumber = $req->get('phoneNumber');
        $params = [
            'fullname' => $fullname,
            'email' => $email,
            'phone_number' => $phoneNumber,
        ];
        $query = $this->accountRepo->update($id, $params);
        if($query > 0) {
            $data['status'] = 0;
            $data['message'] = 'Cập nhật thành công';
        } else{
            $data['status'] = 1;
            $data['message'] = 'Cập nhật thất bại';
        }
        return response()->json($data);
    }

    public function destroy($id) {
        $data = array();
        $query = $this->accountRepo->delete($id);
        if($query > 0) {
            $data['status'] = 0;
            $data['message'] = 'Xóa thành công';
        } else{
            $data['status'] = 1;
            $data['message'] = 'Xóa thất bại';
        }
        return response()->json($data);
    }

    public function fetch(Request $req) {
        $search = $req->get('search');
        $accounts = Account::orderBy('id', 'DESC');
        if($search != '')
            $accounts = $this->accountRepo->search($search);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $accounts = $accounts->paginate($req->numRow);
                return view('admins.manage-accounts.list.pagination', [
                    'accounts' => $accounts,
                ])->render();
            }
            $accounts = $accounts->paginate(5);
            return view('admins.manage-accounts.list.pagination', [
                'accounts' => $accounts,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $search = $req->get('search');
        $accounts = Account::orderBy('id', 'DESC');
        if($search != '')
            $accounts = $this->accountRepo->search($search);
        $accounts = $accounts->paginate($numRow);
        return view('admins.manage-accounts.list.pagination', [
            'accounts' => $accounts,
        ])->render();
    }

    public function search(Request $req) {
        $search = $req->get('search');
        $accounts = $this->accountRepo->search($search);
        $accounts = $accounts->paginate();
        return view('admins.manage-accounts.list.pagination', [
            'accounts' => $accounts,
        ])->render();
    }

    public function changePwd(Request $req) {
        $data = array();
        $auth = Auth::guard('account')->user();
        $currPwd = $req->get('currPwd');
        $newPwd = $req->get('newPwd');
        if(!Hash::check($currPwd, $auth->password)) {
            $data['status'] = 1;
            $data['message'] = 'Sai mật khẩu. Hãy thử lại';
        } else if(Hash::check($currPwd, $auth->password)) {
            if(Hash::check($newPwd, $auth->password)) {
                $data['status'] = 2;
                $data['message'] = 'Mật khẩu mới trùng với mật khẩu cũ. Vui lòng nhập mật khẩu khác';
            } else {
                $query = Account::whereId($auth->id)->update([
                    'password' => Hash::make($newPwd),
                ]);
                if($query > 0) {
                    $data['status'] = 0;
                    $data['message'] = 'Đổi mật khẩu thành công';
                }
            }   
        }
        return response()->json($data);
    }
}
