<?php

// Biên lai đóng tiền của tháng mấy
// month_id year_id

namespace App\Http\Controllers\Admin_12345;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models_12345\DebtControl;
use App\Models_12345\DebtControlDetail;
use App\Models_12345\DebtControlGeneral;
use App\Models_12345\Household;
use Illuminate\Support\Facades\DB;
use Session;
use Auth;
use Carbon\Carbon;
use App\Repositories\AccountRepository;
use App\Repositories\AccountRoomRepository;
use App\Repositories\ApartmentRepository;
use App\Repositories\ImageRepository;
use App\Repositories\MonthRepository;
use App\Repositories\PolicyRepository;
use App\Repositories\RoomRepository;
use App\Repositories\TypePriceRepository;
use App\Repositories\UserRepository;
use App\Repositories\YearRepository;
use App\Repositories\BlockRepository;
use App\Repositories\HouseholdRepository;
use App\Repositories\HouseholdRoomRepository;
use App\Repositories\DebtControlRepository;
use App\Repositories\FloorRepository;
use App\Repositories\DebtControlDetailRepository;

class DebtControlController extends Controller
{

    protected $accountRepository;
    protected $accountRoomRepository;
    protected $apartmentRepository;
    protected $imageRepository;
    protected $monthRepository;
    protected $policyRepository;
    protected $typePriceRepository;
    protected $userRepository;
    protected $roomRepository;
    protected $yearRepository;
    protected $blockRepository;
    protected $householdRepository;
    protected $householdRoomRepository;
    protected $debtControlRepository;
    protected $url = '';
    protected $floorRepository;
    protected $debtControlDetailRepository;

    public function __construct(AccountRepository $accountRepository ,
                                AccountRoomRepository $accountRoomRepository ,
                                ApartmentRepository $apartmentRepository ,
                                ImageRepository $imageRepository ,
                                MonthRepository $monthRepository ,
                                PolicyRepository $policyRepository ,
                                TypePriceRepository $typePriceRepository ,
                                UserRepository $userRepository ,
                                RoomRepository $roomRepository ,
                                YearRepository $yearRepository,
                                BlockRepository $blockRepository,
                                HouseholdRepository $householdRepository,
                                HouseholdRoomRepository $householdRoomRepository,
                                DebtControlRepository $debtControlRepository,
                                Request $request,
                                FloorRepository $floorRepository,
                                DebtControlDetailRepository $debtControlDetailRepository ) {

        $this->accountRepository = $accountRepository;
        $this->accountRoomRepository = $accountRoomRepository;
        $this->apartmentRepository = $apartmentRepository;
        $this->imageRepository = $imageRepository;
        $this->monthRepository = $monthRepository;
        $this->policyRepository = $policyRepository;
        $this->typePriceRepository = $typePriceRepository;
        $this->userRepository = $userRepository;
        $this->roomRepository = $roomRepository;
        $this->yearRepository = $yearRepository;
        $this->blockRepository = $blockRepository;
        $this->householdRepository = $householdRepository;
        $this->householdRoomRepository = $householdRoomRepository;
        $this->debtControlRepository = $debtControlRepository;
        $this->floorRepository = $floorRepository;
        $this->debtControlDetailRepository = $debtControlDetailRepository;

        if (isset($request->url) && $request->url != null) {

            $this->url = $request->url;

        }
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    /** public function index() {
        $householdId = Household::where('fullname', 'Trần S')->where('phone_number', '0945555555')->value('id');

        $debtControls = DebtControlDetail::where('household_id', $householdId)->get();
        // $totalReceivableThisMonth = DB::table('debt_control_details')->where('household_id', $householdId)
        //                             ->sum('outstanding_amount_first_period');
        // $totalPaidThisMonth = DB::table('debt_control_details')->where('household_id', $householdId)
        //                             ->sum('sum_price_amount_received_detail');
        return view('admins.debt-control.index', [
            'debtControls' => $debtControls,
            // 'totalReceivableThisMonth' => $totalReceivableThisMonth,
            // 'totalPaidThisMonth' => $totalPaidThisMonth,
        ]);
    } */

    public function index(Request $request) {

        $apartment_id = 0;

        $block_id = 0;

        $floor_id = 0;

        $room_id = [];

        $month_id = 0;

        $year_id = 0;

        Session::put('open', 'debt-controls.get');
        Session::put('active', 'debt-controls.get');


        $params = $request->all();

        if(empty($params['type_price'])) {

            $params['type_price'] = [];

        }



        if (isset($params['name_apartments'])) {

            $apartment = $this->apartmentRepository->getApartmentByName($params['name_apartments']);

            if ($apartment) {

                $apartment_id = $apartment->id;

            }

            // $blocks_apartment = $apartment->block;

            // foreach ($blocks_apartment as $key_blocks_apartment => $block_apartment) {

            //     $floors_apartment = $block_apartment->floor;

            //     foreach ($floors_apartment as $key_floors_apartment => $floor_apartment) {

            //         $rooms_apartment = $floor_apartment->room;
                        
            //         foreach ($rooms_apartment as $key_rooms_apartment => $room_apartment) {

            //             $room_id[] = $rooms_apartment->id;

            //         }

            //     }

            // }

        }

        if (isset($params['name_block'])) {

            $block = $this->blockRepository->getBlockByNameApartmentID($params['name_block'], $apartment_id);

            if ($block) {

                $block_id = $block->id;

            }

        }

        if (isset($params['name_floors'])) {

            $floor = $this->floorRepository->getFloorByNameBlockID($params['name_floors'], $block_id);

            if ($floor) {

                $floor_id = $floor->id;

            }

        }

        if (isset($params['name_room'])) {

            $room = $this->roomRepository->getRoomByNameFloorId($params['name_room'], $floor_id);

            if ($room) {

                $room_id[] = $room->id;

            }

        }

        if (isset($params['name_month'])) {

            $month = $this->monthRepository->getByTitle($params['name_month']);

            if ($month) {

                $month_id = $month->id;

            }

        }

        if (isset($params['name_year'])) {

            $year = $this->yearRepository->getByTitle($params['name_year']);

            if ($year) {

                $year_id = $year->id;

            }

        }

        $arr_household_room_id  = [];

        $arr_household_room_id = $this->householdRoomRepository->getListByRoomID($room_id)->pluck('id')->toArray();

        $debt_control_generals = $this->debtControlRepository->getListByParams($arr_household_room_id, $month_id, $year_id, $params);

        return view('admins.debt-control.home')->with([

            'params' => $params,
            'debt_control_generals' => $debt_control_generals,

        ]);
    }

    public function fetch() {
        $householdId = Household::where('fullname', 'Trần R')->where('phone_number', '0944444444')->value('id');
        $debtControls = DebtControlDetail::where('household_id', $householdId)->get();
        $totalReceivableThisMonth = DB::table('debt_control_details')->where('household_id', $householdId)
                                    ->sum('outstanding_amount_first_period');
        $totalPaidThisMonth = DB::table('debt_control_details')->where('household_id', $householdId)
                                    ->sum('sum_price_amount_received_detail');

        // return response()->json([
        //     'status' => 200,
        //     'debtControls' => $debtControls,
        //     'totalReceivableThisMonth' => $totalReceivableThisMonth,
        //     'totalPaidThisMonth' => $totalPaidThisMonth,
        // ]);

        $output = '';
        $i = 1;
        $j = 1;
        foreach($debtControls as $debtControl) {
            $output .= '<tr>
                            <td scope="row" class="text-center">'. $i++ .'</td>
                            <td scope="row">'. ($debtControl->managePaidMoney->price == 0 ? '-' : number_format($debtControl->managePaidMoney->price, 0, ',', '.')) .'</td>
                            <td scope="row">'. ($debtControl->managePaidMoney->exemption == 0 ? '-' : $debtControl->managePaidMoney->exemption.'%') .'</td>
                            <td scope="row">'. (($debtControl->managePaidMoney->price_after_policy == 0 ? '-' : $debtControl->managePaidMoney->exemption > 0) ? number_format($debtControl->managePaidMoney->price - ($debtControl->managePaidMoney->price * $debtControl->managePaidMoney->exemption / 100), 0, ',', '.') : number_format(($debtControl->managePaidMoney->price_after_policy), 0, ',', '.')) .'</td>                    
                            <td scope="row">'. ($debtControl->number_month_first_period == 0 ? '-' : $debtControl->number_month_first_period) .'</td>
                            <td scope="row">'. ($debtControl->from_month_first_period == 0 ? "-" : $debtControl->from_month_first_period) .'</td>
                            <td scope="row">'. ($debtControl->to_month_first_period == 0 ? "-" : $debtControl->to_month_first_period) .'</td>
                            <td scope="row" class="outstanding_amount_first_period">'. (($debtControl->outstanding_amount_first_period == 0 ? '-' : $debtControl->managePaidMoney->exemption > 0) ? number_format(($debtControl->managePaidMoney->price - ($debtControl->managePaidMoney->price * $debtControl->managePaidMoney->exemption / 100) - $debtControl->managePaidMoney->amountPaid->price), 0, ',', '.') : number_format(($debtControl->managePaidMoney->price_after_policy - $debtControl->managePaidMoney->amountPaid->price), 0, ',', '.')) .'</td>
                            <td scope="row">'. ($debtControl->revenue_before_this_year_first_period == 0 ? "-" : $debtControl->revenue_before_this_year_first_period) .'</td>
                            <td scope="row">'. ($debtControl->revenue_before_next_year_first_period == 0 ? "-" : $debtControl->revenue_before_next_year_first_period) .'</td>
                            <td scope="row">'. ($debtControl->excess_collection_first_period == 0 ? "-" : $debtControl->excess_collection_first_period) .'</td>
                            '.
                                ($j == 1 ? 
                                    '<td scope="row" rowspan="'.$debtControls->count().'" id="total_receivable_this_month">
                                        '.number_format($totalReceivableThisMonth, 0, ',', '.').'
                                    </td><td scope="row" rowspan="'.$debtControls->count().'" id="total_paid_this_month">
                                        '.number_format($totalPaidThisMonth, 0, ',', '.').'
                                    </td>' .$j = 0 : '')
                            .'
                            <td scope="row">'. ($debtControl->number_month_amount_received_detail == 0 ? "-" : $debtControl->number_month_amount_received_detail) .'</td>
                            <td scope="row">'. ($debtControl->from_month_amount_received_detail == 0 ? "-" : $debtControl->from_month_amount_received_detail) .'</td>
                            <td scope="row">'. ($debtControl->to_month_amount_received_detail == 0 ? "-" : $debtControl->to_month_amount_received_detail) .'</td>
                            <td scope="row">'. ($debtControl->this_year_amount_received_detail == 0 ? "-" : number_format($debtControl->this_year_amount_received_detail, 0, ',', '.')) .'</td>
                            <td scope="row">'. ($debtControl->next_year_amount_received_detail == 0 ? "-" : number_format($debtControl->next_year_amount_received_detail, 0, ',', '.')) .'</td>
                            <td scope="row">'. ($debtControl->excess_collection_amount_received_detail == 0 ? "-" : number_format($debtControl->excess_collection_amount_received_detail, 0, ',', '.')) .'</td>
                            <td scope="row" class="sum_price_amount_received">'. ($debtControl->sum_price_amount_received_detail == 0 ? "-" : number_format($debtControl->sum_price_amount_received_detail, 0, ',', '.')) .'</td>
                        </tr>';
        }
        echo $output;
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, DebtControlDetail $debtControl)
    {
        $householdId = $request->householdId;
        $allOutstandingAmountFirstPeriodReview = $request->get('allOutstandingAmountFirstPeriodReview');

        $debt = DB::table('debt_control_details')->where('household_id', $householdId)->get();

        for($i = 0; $i < count($allOutstandingAmountFirstPeriodReview); $i++) {
            $data = [
                'sum_price_amount_received_detail' => DB::raw('sum_price_amount_received_detail + '.$allOutstandingAmountFirstPeriodReview[$i]),
                'outstanding_amount_first_period' => 0,
            ];
            DB::table('debt_control_details')->whereId($debt[$i]->id)->update($data);

            $data2 = [
                'price' => DB::raw('price + ' .$allOutstandingAmountFirstPeriodReview[$i]),
            ];
            DB::table('amount_paids')->where('manage_paid_money_id', $debt[$i]->manage_paid_money_id)->update($data2);

            $data3 = [
                'sum_price_amount_received' => DB::raw('sum_price_amount_received + ' .$allOutstandingAmountFirstPeriodReview[$i]),
            ];
            DB::table('amount_receiveds')->where('manage_paid_money_id', $debt[$i]->manage_paid_money_id)->update($data3);
        }

        return response()->json([
            'status' => 200,
            // 'message' => 'Thành công',
        ]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function getListByArrIDUpdate(Request $request) {

        $debt_control_generals = $this->debtControlRepository->getListByArrID($request->arr_id);

        return view('admins.debt-control.ajax-update')->with([
            
            'debt_control_generals' => $debt_control_generals,

        ]);

    }

    public function updateListDetailByArrID(Request $request) {

        $params = $request->all();

        // truy thu thêm dòng
        if ($params['arrears'] != null || $params['arrears'] > 0) {

            if ($params['add_arrears'] == 1) {

                $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][0]);

                $params_debt_detail = [];

                $params_debt_detail['debt_control_general_id'] = $debt_detail->debt_control_general_id;

                $params_debt_detail['manage_paid_money_id'] = $debt_detail->manage_paid_money_id;

                $params_debt_detail['household_room_id'] = $debt_detail->household_room_id;

                $params_debt_detail['month_id'] = $debt_detail->month_id;

                $params_debt_detail['year_id'] = $debt_detail->year_id;

                $params_debt_detail['type_price_id'] = $debt_detail->type_price_id;

                $params_debt_detail['price'] = 0;

                $params_debt_detail['outstanding_amount_first_period'] = $params['arrears'];

                $create_debt_detail = $this->debtControlDetailRepository->create($params_debt_detail);

                if ($create_debt_detail) {

                    Session::put('error', 'Thất bại!');
                    Session::save();

                    return redirect()->back();

                }


            }

        }
        //

        //update dữ liệu

        //// update debt-control

        $debt_control_general = $this->debtControlRepository->getById($params['debt_control_general_id']);

        if ($debt_control_general) {

            $params_debt_control_update = [];

            $params_debt_control_update['receivable'] = $params['receivable'];

            $params_debt_control_update['note_arrears'] = $params['note_arrears'];

            $params_debt_control_update['note_reduce'] = $params['note_reduce'];

            $params_debt_control_update['note_debt_control_general'] = $params['note_debt_control_general'];

            $update_debt_control_general = $this->debtControlRepository->update($debt_control_general->id, $params_debt_control_update);

            if (!$update_debt_control_general) {

                Session::put('error', 'Thất bại!');
                Session::save();

                return redirect()->back();

            }

        }

        ////

        //// update debt-detai

        foreach ($params['debt_control_detail_id'] as $key_debt_control_detail_id => $value_debt_control_detail_id) {
                
                $debt_control_detail_by_id = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail_id]);

                if (!$debt_control_detail_by_id) {

                    Session::put('error', 'Thất bại!');
                    Session::save();

                    return redirect()->back();                    

                }

        }

        foreach ($params['debt_control_detail_id'] as $key_debt_control_detail => $value_debt_control_detail) {
            
            $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail]);

            $debt_detail_update_params = [];

            $debt_detail_update_params['number_month_amount_received_detail'] = $params['number_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['from_month_amount_received_detail'] = $params['from_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['to_month_amount_received_detail'] = $params['to_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['this_year_amount_received_detail'] = $params['this_year_amount_received_detail'][$key_debt_control_detail] + $params['adjust_this_year'][$key_debt_control_detail];

            $debt_detail_update_params['next_year_amount_received_detail'] = $params['next_year_amount_received_detail'][$key_debt_control_detail] + $params['adjust_next_year'][$key_debt_control_detail];

            $debt_detail_update_params['excess_collection_amount_received_detail'] = $params['excess_collection_amount_received_detail'][$key_debt_control_detail] + $params['adjust_excess_collection'][$key_debt_control_detail];

            $debt_detail_update_params['sum_price_amount_received_detail'] = $debt_detail_update_params['this_year_amount_received_detail'] + $debt_detail_update_params['next_year_amount_received_detail'] + $debt_detail_update_params['excess_collection_amount_received_detail'];

            $debt_detail_update = $this->debtControlDetailRepository->update($debt_detail->id, $debt_detail_update_params);

            $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail]);

            // so sánh số dư cuối kì



                if ($debt_detail->number_month_last_period != $params['number_month_last_period'][$key_debt_control_detail] 
                    || $debt_detail->from_month_last_period != $params['from_month_last_period'][$key_debt_control_detail] 
                    || $debt_detail->to_month_last_period != $params['to_month_last_period'][$key_debt_control_detail] 
                    || $debt_detail->outstanding_amount_last_period != $params['outstanding_amount_last_period'][$key_debt_control_detail] 
                    || $debt_detail->revenue_before_this_year_last_period != $params['revenue_before_this_year_last_period'][$key_debt_control_detail] 
                    || $debt_detail->revenue_before_next_year_last_period != $params['revenue_before_next_year_last_period'][$key_debt_control_detail]
                    || $debt_detail->excess_collection_last_period != $params['excess_collection_last_period'][$key_debt_control_detail]) {

                    $params_update_debt_detail_last_period = [];

                    $params_update_debt_detail_last_period['number_month_last_period'] = $params['number_month_last_period'][$key_debt_control_detail];

                    $params_update_debt_detail_last_period['from_month_last_period'] = $params['from_month_last_period'][$key_debt_control_detail];

                    $params_update_debt_detail_last_period['to_month_last_period'] = $params['to_month_last_period'][$key_debt_control_detail];

                    $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $params['outstanding_amount_last_period'][$key_debt_control_detail];

                    $params_update_debt_detail_last_period['revenue_before_this_year_last_period'] = $params['revenue_before_this_year_last_period'][$key_debt_control_detail];

                    $params_update_debt_detail_last_period['revenue_before_next_year_last_period'] = $params['revenue_before_next_year_last_period'][$key_debt_control_detail];

                    $params_update_debt_detail_last_period['excess_collection_last_period'] = $params['excess_collection_last_period'][$key_debt_control_detail];

                    $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);



                }
                else
                {
                    if ($key_debt_control_detail == 0) {

                        $outstanding_amount_last_period = $debt_detail->outstanding_amount_first_period + $params['receivable'] - $debt_detail->sum_price_amount_received_detail;

                        if ($outstanding_amount_last_period > 0) {

                            $params_update_debt_detail_last_period = [];

                            if ($debt_detail->price_after_policy == 0) {

                                $params_update_debt_detail_last_period = [];

                                $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                                $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                                $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                                $params_update_debt_detail_last_period['outstanding_amount_last_period'] =  $outstanding_amount_last_period;

                                $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                            }

                            else
                            {

                                $params_update_debt_detail_last_period['number_month_last_period'] = ceil($outstanding_amount_last_period / $debt_detail->price_after_policy);

                                // tháng bắt đầu
                                $month_from_month_last_period = 0;

                                $year_from_month_last_period = 0;

                               

                                $month_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('m');

                                $year_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('Y');

                                $sum_month = $month_from + floor($debt_detail->number_month_first_period - ($outstanding_amount_last_period / $debt_detail->price_after_policy));

                                if ($sum_month > 12 ) {

                                    if ($sum_month % 12 == 0) {
                                        $month_from_month_last_period = 12;
                                    }
                                    else
                                    {
                                        $month_from_month_last_period = $sum_month % 12;
                                    }

                                    $year_from_month_last_period = $year_from + floor($sum_month / 12);

                                }
                                else
                                {
                                    $month_from_month_last_period = $sum_month;

                                    $year_from_month_last_period = $year_from;

                                }

                                $params_update_debt_detail_last_period['from_month_last_period'] = $month_from_month_last_period.'-'.$year_from_month_last_period;

                                // tháng kết thúc

                                $month_last_month_last_period = 0;

                                $year_last_month_last_period = 0;

                               

                                $month_from = Carbon::createFromFormat('m-Y', $debt_detail->to_month_first_period)->format('m');

                                $year_from = Carbon::createFromFormat('m-Y', $debt_detail->to_month_first_period)->format('Y');

                                $sum_month = $month_from + floor(($outstanding_amount_last_period / $debt_detail->price_after_policy) - $debt_detail->number_month_first_period);

                                if ($sum_month > 12 ) {

                                    if ($sum_month % 12 == 0) {
                                        $month_last_month_last_period = 12;
                                    }
                                    else
                                    {
                                        $month_last_month_last_period = $sum_month % 12;
                                    }

                                    $year_last_month_last_period = $year_from + floor($sum_month / 12);

                                }
                                else
                                {
                                    $month_last_month_last_period = $sum_month;

                                    $year_last_month_last_period = $year_from;

                                }

                                $params_update_debt_detail_last_period['to_month_last_period'] =  $month_last_month_last_period.'-'.$year_last_month_last_period;
                                //

                                $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;

                                $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                            }
                        }
                        else
                        {
                            $params_update_debt_detail_last_period = [];

                            $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                            $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                            $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                            $params_update_debt_detail_last_period['outstanding_amount_last_period'] = 0;

                            $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                        }

                    }
                    else
                    {
                        $outstanding_amount_last_period = $debt_detail->outstanding_amount_first_period - $debt_detail->sum_price_amount_received_detail;

                        if ($outstanding_amount_last_period > 0) {

                            $params_update_debt_detail_last_period = [];

                            if ($debt_detail->price_after_policy == 0) {

                                $params_update_debt_detail_last_period = [];

                                $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                                $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                                $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                                $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;

                                $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                            }

                            else
                            {

                                $params_update_debt_detail_last_period['number_month_last_period'] = ceil($outstanding_amount_last_period / $debt_detail->price_after_policy);


                                $month_from_month_last_period = 0;

                                $year_from_month_last_period = 0;

                                $month_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('m');

                                $year_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('Y');

                                $sum_month = $month_from + floor($debt_detail->number_month_first_period - ($outstanding_amount_last_period / $debt_detail->price_after_policy));

                                if ($sum_month > 12 ) {

                                    if ($sum_month % 12 == 0) {
                                        $month_from_month_last_period = 12;
                                    }
                                    else
                                    {
                                        $month_from_month_last_period = $sum_month % 12;
                                    }

                                    $year_from_month_last_period = $year_from + floor($sum_month / 12);

                                }
                                else
                                {
                                    $month_from_month_last_period = $sum_month;

                                    $year_from_month_last_period = $year_from;

                                }

                                $params_update_debt_detail_last_period['from_month_last_period'] = $month_from_month_last_period.'-'.$year_from_month_last_period;

                                //tháng kết thúc

                                $month_last_month_last_period = 0;

                                $year_last_month_last_period = 0;

                               

                                $month_from = Carbon::createFromFormat('m-Y', $debt_detail->to_month_first_period)->format('m');

                                $year_from = Carbon::createFromFormat('m-Y', $debt_detail->to_month_first_period)->format('Y');

                                $sum_month = $month_from + floor(($outstanding_amount_last_period / $debt_detail->price_after_policy) - $debt_detail->number_month_first_period);

                                if ($sum_month > 12 ) {

                                    if ($sum_month % 12 == 0) {
                                        $month_last_month_last_period = 12;
                                    }
                                    else
                                    {
                                        $month_last_month_last_period = $sum_month % 12;
                                    }

                                    $year_last_month_last_period = $year_from + floor($sum_month / 12);

                                }
                                else
                                {
                                    $month_last_month_last_period = $sum_month;

                                    $year_last_month_last_period = $year_from;

                                }

                                $params_update_debt_detail_last_period['to_month_last_period'] =  $month_last_month_last_period.'-'.$year_last_month_last_period;
                                //

                                $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;
                    
                                $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                            }

                        }
                        else
                        {
                            $params_update_debt_detail_last_period = [];

                            $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                            $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                            $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                            $params_update_debt_detail_last_period['outstanding_amount_last_period'] = 0;

                            $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                        }
                    }
                }

        }

        Session::put('success', 'Thành công!');
        Session::save();

        return redirect()->back();

    }

    public function getListByIDApproval(Request $request) {

        $debt_control_general = $this->debtControlRepository->getById($request->arr_id[0]);

        return view('admins.debt-control.ajax-approval')->with([
            
            'debt_control_general' => $debt_control_general,

        ]);

    }

    public function approvalListDetailByID(Request $request) {

        $params = $request->all();

        //// update debt-detai

        foreach ($params['debt_control_detail_id'] as $key_debt_control_detail_id => $value_debt_control_detail_id) {
                
                $debt_control_detail_by_id = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail_id]);

                if (!$debt_control_detail_by_id) {

                    Session::put('error', 'Thất bại!');
                    Session::save();

                    return redirect()->back();                    

                }

        }

        foreach ($params['debt_control_detail_id'] as $key_debt_control_detail => $value_debt_control_detail) {
            
            $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail]);

            $debt_detail_update_params = [];

            $debt_detail_update_params['number_month_amount_received_detail'] = $params['number_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['from_month_amount_received_detail'] = $params['from_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['to_month_amount_received_detail'] = $params['to_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['this_year_amount_received_detail'] = $params['this_year_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['next_year_amount_received_detail'] = $params['next_year_amount_received_detail'][$key_debt_control_detail] ;

            $debt_detail_update_params['excess_collection_amount_received_detail'] = $params['excess_collection_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['sum_price_amount_received_detail'] = $debt_detail_update_params['this_year_amount_received_detail'] + $debt_detail_update_params['next_year_amount_received_detail'] + $debt_detail_update_params['excess_collection_amount_received_detail'];

            $debt_detail_update = $this->debtControlDetailRepository->update($debt_detail->id, $debt_detail_update_params);

            $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail]);

            // so sánh số dư cuối kì

            $outstanding_amount_last_period = $debt_detail->outstanding_amount_first_period - $debt_detail->sum_price_amount_received_detail;

            if ($outstanding_amount_last_period > 0) {

                $params_update_debt_detail_last_period = [];

                if ($debt_detail->price_after_policy == 0) {

                    $params_update_debt_detail_last_period = [];

                    $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                    $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                    $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                    $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;

                    $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                }

                else
                {

                

                    $params_update_debt_detail_last_period['number_month_last_period'] = ceil($outstanding_amount_last_period / $debt_detail->price_after_policy);


                    $month_from_month_last_period = 0;

                    $year_from_month_last_period = 0;

                    $month_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('m');

                    $year_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('Y');

                    $sum_month = $month_from + floor($debt_detail->number_month_first_period - ($outstanding_amount_last_period / $debt_detail->price_after_policy));

                    if ($sum_month > 12 ) {

                        if ($sum_month % 12 == 0) {
                            $month_from_month_last_period = 12;
                        }
                        else
                        {
                            $month_from_month_last_period = $sum_month % 12;
                        }

                        $year_from_month_last_period = $year_from + floor($sum_month / 12);

                    }
                    else
                    {
                        $month_from_month_last_period = $sum_month;

                        $year_from_month_last_period = $year_from;

                    }

                    $params_update_debt_detail_last_period['from_month_last_period'] = $month_from_month_last_period.'-'.$year_from_month_last_period;

                    $params_update_debt_detail_last_period['to_month_last_period'] = $debt_detail->to_month_first_period;

                    $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;
        
                    $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                }

            }
            else
            {
                $params_update_debt_detail_last_period = [];

                $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                $params_update_debt_detail_last_period['outstanding_amount_last_period'] = 0;

                $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
            }


        }

        Session::put('success', 'Thành công!');
        Session::save();

        return redirect()->back();

    }

    public function getListByIDTach(Request $request) {

        $debt_control_general = $this->debtControlRepository->getById($request->arr_id[0]);

        return view('admins.debt-control.ajax-tach')->with([
            
            'debt_control_general' => $debt_control_general,

        ]);

    }

    public function tachListDetailByID(Request $request) {

        $params = $request->all();

        //// update debt-detai

        foreach ($params['debt_control_detail_id'] as $key_debt_control_detail_id => $value_debt_control_detail_id) {
                
                $debt_control_detail_by_id = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail_id]);

                if (!$debt_control_detail_by_id) {

                    Session::put('error', 'Thất bại!');
                    Session::save();

                    return redirect()->back();                    

                }

        }

        foreach ($params['debt_control_detail_id'] as $key_debt_control_detail => $value_debt_control_detail) {
            
            $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail]);

            $debt_detail_update_params = [];

            $debt_detail_update_params['number_month_amount_received_detail'] = $params['number_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['from_month_amount_received_detail'] = $params['from_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['to_month_amount_received_detail'] = $params['to_month_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['this_year_amount_received_detail'] = $params['this_year_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['next_year_amount_received_detail'] = $params['next_year_amount_received_detail'][$key_debt_control_detail] ;

            $debt_detail_update_params['excess_collection_amount_received_detail'] = $params['excess_collection_amount_received_detail'][$key_debt_control_detail];

            $debt_detail_update_params['sum_price_amount_received_detail'] = $debt_detail_update_params['this_year_amount_received_detail'] + $debt_detail_update_params['next_year_amount_received_detail'] + $debt_detail_update_params['excess_collection_amount_received_detail'];

            $debt_detail_update = $this->debtControlDetailRepository->update($debt_detail->id, $debt_detail_update_params);

            $debt_detail = $this->debtControlDetailRepository->getById($params['debt_control_detail_id'][$key_debt_control_detail]);

            // so sánh số dư cuối kì

            $outstanding_amount_last_period = $debt_detail->outstanding_amount_first_period - $debt_detail->sum_price_amount_received_detail;

            if ($outstanding_amount_last_period > 0) {

                $params_update_debt_detail_last_period = [];

                if ($debt_detail->price_after_policy == 0) {

                    $params_update_debt_detail_last_period = [];

                    $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                    $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                    $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                    $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;

                    $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                }

                else
                {

                

                    $params_update_debt_detail_last_period['number_month_last_period'] = ceil($outstanding_amount_last_period / $debt_detail->price_after_policy);


                    $month_from_month_last_period = 0;

                    $year_from_month_last_period = 0;

                    $month_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('m');

                    $year_from = Carbon::createFromFormat('m-Y', $debt_detail->from_month_first_period)->format('Y');

                    $sum_month = $month_from + floor($debt_detail->number_month_first_period - ($outstanding_amount_last_period / $debt_detail->price_after_policy));

                    if ($sum_month > 12 ) {

                        if ($sum_month % 12 == 0) {
                            $month_from_month_last_period = 12;
                        }
                        else
                        {
                            $month_from_month_last_period = $sum_month % 12;
                        }

                        $year_from_month_last_period = $year_from + floor($sum_month / 12);

                    }
                    else
                    {
                        $month_from_month_last_period = $sum_month;

                        $year_from_month_last_period = $year_from;

                    }

                    $params_update_debt_detail_last_period['from_month_last_period'] = $month_from_month_last_period.'-'.$year_from_month_last_period;

                    $params_update_debt_detail_last_period['to_month_last_period'] = $debt_detail->to_month_first_period;

                    $params_update_debt_detail_last_period['outstanding_amount_last_period'] = $outstanding_amount_last_period;
        
                    $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
                }

            }
            else
            {
                $params_update_debt_detail_last_period = [];

                $params_update_debt_detail_last_period['number_month_last_period'] = 0;

                $params_update_debt_detail_last_period['from_month_last_period'] = 0;

                $params_update_debt_detail_last_period['to_month_last_period'] = 0;

                $params_update_debt_detail_last_period['outstanding_amount_last_period'] = 0;

                $update_debt_detail_last_period = $this->debtControlDetailRepository->update($debt_detail->id, $params_update_debt_detail_last_period);
            }


        }

        Session::put('success', 'Thành công!');
        Session::save();

        return redirect()->back();

    }
}
