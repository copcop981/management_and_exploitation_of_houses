<?php

namespace App\Http\Controllers\Admin_12345;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models_12345\TicketType;
use App\Repositories\TicketTypeRepository;

class TicketTypeController extends Controller
{
    protected $ttRepo;
    public function __construct(TicketTypeRepository $ttRepo) {
        $this->ttRepo = $ttRepo;
    }

    public function params($req) {
        $type = $req->get('type');
        $price = $req->get('price');
        $vat = $req->get('vat');
        $priceBeforeVat = $req->get('priceBeforeVat');
        $pattern = $req->get('pattern');
        $serial = $req->get('serial');
        $params = [
            'type' => $type,
            'price' => $price,
            'vat' => $vat,
            'price_before_vat' => $priceBeforeVat,
            'pattern' => $pattern,
            'serial' => $serial,
        ];
        return $params;
    }

    public function index() {
        $types = $this->ttRepo->getListPaginates(5);
        return view('admins.tickets.ticket-type.index', [
            'types' => $types,
        ]);
    }

    public function create() {
        
    }

    public function store(Request $req) {
        $data = array();
        $params = $this->params($req);
        $checkIfExists = TicketType::where('type', $params['type'])->exists();
        if($checkIfExists) $query = 'Đã tồn tại';
        else $query = $this->ttRepo->create($params);
        if($query != null && $query !== 'Đã tồn tại') {
            $data['status'] = 200;
            $data['message'] = 'Tạo loại vé thành công';
        } else if($query === 'Đã tồn tại') {
            $data['status'] = 401;
            $data['message'] = 'Vé xe này đã tồn tại';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Tạo không thành công';
        }
        return response()->json($data);
    }

    public function show($id) {
        
    }

    public function edit(TicketType $ticketType) {
        return response()->json(['ticketType' => $ticketType]);
    }

    public function update(Request $req, $id) {
        $data = array();
        $params = $this->params($req);
        $exceptThisType = TicketType::where('id', $id)->value('type');
        $checkIfExists = TicketType::where('type', $params['type'])->whereNotIn('type', [$exceptThisType])->exists();
        if($checkIfExists) $query = 'Đã tồn tại';
        else $query = $this->ttRepo->update($id, $params);

        if($query > 0 && $query !== 'Đã tồn tại') {
            $data['status'] = 200;
            $data['message'] = 'Cập nhật Loại vé thành công';
        } else if($query === 'Đã tồn tại') {
            $data['status'] = 401;
            $data['message'] = 'Vé xe này đã tồn tại';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Cập nhật Loại vé thất bại';
        }
        return response()->json($data);
    }

    public function updateStatus(Request $req, $id) {
        $data = array();
        $status = $req->get('status');
        $query = $this->ttRepo->update($id, ['status' => $status,]);
        if($query > 0) {
            $data['status'] = 200;
            $data['message'] = 'Cập nhật trạng thái thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Cập nhật trạng thái thất bại';
        }
        return response()->json($data);
    }

    public function destroy($id) {
        $data = array();
        $query = $this->ttRepo->delete($id);
        if($query > 0) {
            $data['status'] = 200;
            $data['message'] = 'Xóa Loại vé thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Xóa không thành công';
        }
        return response()->json($data);
    }

    public function fetch(Request $req) {
        $search = $req->get('search');
        $types = TicketType::orderBy('id', 'DESC');
        if($search != '')
            $types = $this->ttRepo->searchTicketType($search);
        if($req->ajax()) {
            if($req->numRow > 0) {
                $types = $types->paginate($req->numRow);
                return view('admins.tickets.ticket-type.pagination', [
                    'types' => $types,
                ])->render();
            }
            $types = $types->paginate(5);
            return view('admins.tickets.ticket-type.pagination', [
                'types' => $types,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $search = $req->get('search');
        $types = TicketType::orderBy('id', 'DESC');
        if($search != '')
            $types = $this->ttRepo->searchTicketType($search);
        $types = $types->paginate($numRow);
        return view('admins.tickets.ticket-type.pagination', [
            'types' => $types,
        ])->render();
    }

    public function search(Request $req) {
        $search = $req->get('search');
        $types = $this->ttRepo->searchTicketType($search);
        $types = $types->paginate();
        return view('admins.tickets.ticket-type.pagination', [
            'types' => $types,
        ])->render();
    }
}
