<?php

namespace App\Http\Controllers\Admin_12345;

use Exception;
use SoapClient;
use Carbon\Carbon;
use App\Models_12345\Room;
use App\Models_12345\Block;
use App\Models_12345\Floor;
use Illuminate\Http\Request;
use App\Models_12345\Account;
use App\Models_12345\Invoice;
use App\Imports\InvoiceImport;
use App\Models_12345\Apartment;
use App\Models_12345\Household;
use Illuminate\Support\Facades\DB;
use App\Models_12345\HouseholdRoom;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;

class InvoiceController extends Controller
{
    // public function __construct() {
    //     $this->middleware('auth');
    // }

    public function index() {
        $apartments = Apartment::all();
        $invoices = Invoice::paginate(5);
        $accounts = Account::all();
        return view('admins.invoices.index', [
            'apartments' => $apartments,
            'invoices' => $invoices,
            'accounts' => $accounts,
        ]);
    }

    public function getApartment() {
        $apartments = Apartment::all();
        return view('admins.invoices.create', [
            'apartments' => $apartments,
        ]);
    }

    public function getBlock(Request $req) {
        $apartmentId = $req->get('apartmentId');
        $blocks = Block::all()->where('apartment_id', $apartmentId);
        return response()->json([
            'status' => 200,
            'blocks' => $blocks,
        ]);
    }

    public function getFloor(Request $req) {
        $blockId = $req->get('blockId');
        $floors = Floor::all()->where('block_id', $blockId);
        return response()->json([
            'status' => 200,
            'floors' => $floors,
        ]);
    }

    public function getRoom(Request $req) {
        $floorId = $req->get('floorId');
        $rooms = Room::all()->where('floor_id', $floorId);
        return response()->json([
            'status' => 200,
            'rooms' => $rooms,
        ]);
    }

    public function getHousehold(Request $req) {
        $roomId = $req->get('roomId');
        $householdId = HouseholdRoom::where('room_id', $roomId)->value('household_id');
        $household = DB::table('households')->where('id', $householdId)->get();

        if($household->count() > 0) {
            return response()->json([
                'status' => 200,
                'household' => $household,
            ]);
        } else {
            return response()->json([
                'status' => 400,
                'message' => 'Không có hộ dân ở căn hộ này',
            ]);
        }
    }

    public function store(Request $req) {
        $data = array();
        $roomId = $req->get('room');
        $householdRoomId = HouseholdRoom::where('room_id', $roomId)->value('id');

        $isExists = Invoice::where('invoice_no', $req->get('invoiceNo'))->first();
        if($isExists) {
            $data['status'] = 400;
            $data['message'] = 'Biên lai này đã tồn tại';
        } else {
            $invoice = new Invoice;
            $invoice->form_no = $req->get('formNo');
            $invoice->serial_no = $req->get('serialNo');
            $invoice->invoice_no = $req->get('invoiceNo');
            $invoice->date_created = Carbon::now();
            // $invoice->creator = Auth::user()->username;
            $invoice->status = 0;
            $invoice->fee_name = $req->get('feeName');
            $invoice->fee_amount = $req->get('feeAmount');
            $invoice->bank_no = $req->get('bankNo');
            $invoice->bank_name = $req->get('bankName');
            $invoice->pay_method = $req->get('payMethod');
            $invoice->apartment_id = $req->get('apartment');
            $invoice->block_id = $req->get('block');
            $invoice->floor_id = $req->get('floor');
            $invoice->room_id = $req->get('room');
            $invoice->household_room_id = $householdRoomId;
            $invoice->save();

            $data['status'] = 200;
            $data['message'] = 'Tạo Biên lai thành công';
        }
        return response()->json($data);
    }

    public function show($id) {
        // $invoice = invoice::all()->where('id', $req->invoiceId);
        $invoice = Invoice::findOrFail($id);
        // $householdRoomId = invoice::whereId($id)->value('id');
        // $householdId = HouseholdRoom::whereId($householdRoomId)->value('household_id');
        // $household = Household::all()->where('id', $householdId)->first();
        $customerName = $invoice->householdRoom->household->fullname;
        $room = $invoice->householdRoom->room->name;
        $floor = $invoice->householdRoom->room->floor->name;
        $block = $invoice->householdRoom->room->floor->block->name;
        $apartment = $invoice->householdRoom->room->floor->block->apartment->name;
        
        if(!$invoice) {
            return response()->json([
                'status' => 404,
                'message' => 'Không tìm thấy hóa đơn này',
            ]);
        } else {
            return response()->json([
                'status' => 200,
                'invoice' => $invoice,
                'customerName' => $customerName,
                'room' => $room,
                'floor' => $floor,
                'block' => $block,
                'apartment' => $apartment,
            ]);
        }
    }

    public function edit($id) {
        $invoice = Invoice::where('status', 0)->findOrFail($id);
        $apartments = Apartment::all();
        $blocks = Block::all()->where('apartment_id', $invoice->householdRoom->room->floor->block->apartment->id);
        $floors = Floor::all()->where('block_id', $invoice->householdRoom->room->floor->block->id);
        $rooms = Room::all()->where('floor_id', $invoice->householdRoom->room->floor->id);
        // $household = Household::all()->where('id', $invoice->householdRoom->household->id)->first();
        return view('admins.invoices.edit', [
            'invoice' => $invoice,
            'apartments' => $apartments,
            'blocks' => $blocks,
            'floors' => $floors,
            'rooms' => $rooms,
            // 'household' => $household,
        ]);
    }

    public function update(Invoice $invoice, Request $req) {
        $data = array();
        $roomId = $req->get('room');
        $householdRoomId = HouseholdRoom::where('room_id', $roomId)->value('id');
        $exceptInvoiceNo = Invoice::where('id', $req->get('invoiceId'))->value('invoice_no');
        $isExists = Invoice::where('invoice_no', $req->get('invoiceNo'))->whereNotIn('invoice_no', [$exceptInvoiceNo])->first();
        if($isExists) {
            $data['status'] = 400;
            $data['message'] = 'Biên lai này đã tồn tại';
        } else {
                $invoice->update([
                'form_no' => $req->get('formNo'),
                'serial_no' => $req->get('serialNo'),
                'invoice_no' => $req->get('invoiceNo'),
                'date_created' => Carbon::now(),
                // 'creator' => Auth::user()->username,
                'status' => 0,
                'fee_name' => $req->get('feeName'),
                'fee_amount' => $req->get('feeAmount'),
                'bank_no' => $req->get('bankNo'),
                'bank_name' => $req->get('bankName'),
                'pay_method' => $req->get('payMethod'),
                'apartment_id' => $req->get('apartment'),
                'block_id' => $req->get('block'),
                'floor_id' => $req->get('floor'),
                'room_id' => $req->get('room'),
                'household_room_id' => $householdRoomId,
            ]); 
            $data['status'] = 200;
            $data['message'] = 'Cập nhật Biên lai thành công';
        }
        return response()->json($data);
    }

    public function destroy(Invoice $invoice) {
        $data = array();
        $query = $invoice->delete();
        if($query > 0) {
            $data['status'] = 200;
            $data['message'] = 'Đã xóa Biên lai thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Xóa không thành công';
        }
        return response()->json($data);
    }

    public function search(Request $req) {
        $formNo = $req->get('formNo');
        $serialNo = $req->get('serialNo');
        $invoiceNo = $req->get('invoiceNo');
        $status = $req->get('status');
        $dateCreated = $req->get('dateCreated');
        $creator = $req->get('creator');
        $apartmentId = $req->get('apartment');
        $blockId = $req->get('block');
        $floorId = $req->get('floor');
        $roomId = $req->get('room');
        $phoneNumber = $req->get('customerPhoneNumber');

        $householdId = Household::where('phone_number', $phoneNumber)->value('id');
        $householdRoomId = HouseholdRoom::where('household_id', $householdId)->value('id');
        $invoices = Invoice::where('household_room_id', 'like', '%'.$householdRoomId.'%')
                            ->where('form_no', 'like', '%'.$formNo.'%')
                            ->where('serial_no', 'like', '%'.$serialNo.'%')
                            ->where('invoice_no', 'like', '%'.$invoiceNo.'%')
                            ->where('status', 'like', '%'.$status.'%')
                            ->where('date_created', 'like', '%'.$dateCreated.'%')
                            ->where('creator', 'like', '%'.$creator.'%')
                            ->where('apartment_id', 'like', '%'.$apartmentId.'%')
                            ->where('block_id', 'like', '%'.$blockId.'%')
                            ->where('floor_id', 'like', '%'.$floorId.'%')
                            ->where('room_id', 'like', '%'.$roomId.'%')
                            ->paginate();
        // $output = '';
        // $i = 1;
        // foreach($invoices as $invoice) {
        //     $output .= '
        //         <tr>
        //             <td scope="row">
        //                 <input type="checkbox" name="" id="" style="cursor: pointer;">
        //             </td>
        //             <td scope="row">'.$i++.'</td>
        //             <td scope="row" class="text-uppercase">'.$invoice->form_no.'</td>
        //             <td scope="row" class="text-uppercase">'.$invoice->serial_no.'</td>
        //             <td scope="row">'.$invoice->invoice_no.'</td>
        //             <td scope="row">'.$invoice->householdRoom->room->floor->block->apartment->name.'</td>
        //             <td scope="row">'.$invoice->householdRoom->room->floor->block->name.'</td>
        //             <td scope="row">'.$invoice->householdRoom->room->floor->name.'</td>
        //             <td scope="row">'.$invoice->householdRoom->room->name.'</td>
        //             <td scope="row">'.$invoice->householdRoom->household->fullname.'</td>
        //             <td scope="row">'.\Carbon\Carbon::parse($invoice->date_created)->format('d-m-Y').'</td>
        //             <td scope="row">'.$invoice->creator.'</td>
        //             <td scope="row">
        //                 '.
        //                     ($invoice->status == 0 ? 'Chưa ký' : ($invoice->status == 1 ? 'Đã ký' : 'Đã phát hành'))
        //                 .'
        //             </td>
        //             <td scope="row">
        //                 <center>
        //                     <button type="button" value="'.$invoice->id.'" class="btn btn-outline-primary btn-sm" id="show_invoice_btn">
        //                         <i class="fa-regular fa-eye"></i>
        //                     </button>
        //                 </center>
        //             </td>
        //             <td scope="row">
        //                 <center>
        //                     <a href="'.route('edit.invoice', $invoice->id).'" class="btn btn-outline-success btn-sm '.($invoice->status > 0 ? 'disabled' : '').'" id="edit_invoice_btn">
        //                         <i class="fa-solid fa-pen"></i>
        //                     </a>
        //                 </center>
        //             </td>
        //             <td scope="row">
        //                 <center>
        //                     <button type="button" value="'.$invoice->id.'" class="btn btn-outline-danger btn-sm" id="delete_invoice_btn">
        //                         <i class="fa-solid fa-trash"></i>
        //                     </button>
        //                 </center>
        //             </td>
        //         </tr>
        //     ';
        // }
        // echo $output;
        return view('admins.invoices.pagination', [
            'invoices' => $invoices,
        ])->render();
    }

    public function fetch(Request $req) {
        $apartments = Apartment::all();
        $accounts = Account::all();
        if($req->ajax()) {
            if($req->numRow > 0) {
                $invoices = Invoice::paginate($req->numRow);
                return view('admins.invoices.pagination', [
                    'invoices' => $invoices,
                    'apartments' => $apartments,
                    'accounts' => $accounts,
                ])->render();
            }
            $invoices = Invoice::paginate(5);
            return view('admins.invoices.pagination', [
                'invoices' => $invoices,
                'apartments' => $apartments,
                'accounts' => $accounts,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $apartments = Apartment::all();
        $accounts = Account::all();
        $invoices = Invoice::paginate($numRow);
        return view('admins.invoices.pagination', [
            'invoices' => $invoices,
            'apartments' => $apartments,
            'accounts' => $accounts,
        ])->render();
    }

    public function destroyMany(Request $req) {
        $data = array();
        $allIds = $req->get('allIds');
        $query = Invoice::whereIn('id', $allIds)->delete();
        if($query > 0) {
            $data['status'] = 200;
            $data['message'] = 'Đã xóa Biên lai thành công!';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Xóa không thành công!';
        }
        return response()->json($data);
    }

    public function destroyUnsigned() {
        $data = array();
        $query = Invoice::where('status', 0)->delete();
        if($query > 0) {
            $data['status'] = 200;
            $data['message'] = 'Đã xóa Biên lai thành công';
        } else {
            $data['status'] = 400;
            $data['message'] = 'Không có Biên lai nào chưa ký';
        }
        return response()->json($data);
    }

    public function importExcel(Request $req) {
        $data = array();
        
        $validator = Validator::make($req->all(), [
            'file' => 'required|mimes:xlsx,csv,ods',
        ]);
        if($validator->fails()) {
            $data['status'] = 0;
            $data['error'] = $validator->errors()->first('file');
        } else {
            if($req->file('file')) {
                $file = $req->file('file');
                $fileName = time().'.'.$file->getClientOriginalExtension();
                $file->storeAs('excel_file_imported/invoice', $fileName, 'public');
                $import = new InvoiceImport;
                $import->import($file);
                $data['status'] = 200;
                $data['message'] = 'Đã Import file Excel thành công';
            } else {
                $data['status'] = 400;
                $data['message'] = 'Lỗi Import';
            }
        }
        return response()->json($data);
    }

    public function publishInvoice(Request $req) {
        try {
            $soapClient = new SoapClient('https://bvyhctdngadmindemo.vnpt-invoice.com.vn/businessService.asmx?wsdl');

            $param = array(
                'Account' => 'bvyhctdngadmin',
                'ACpass' => 'Einv@oi@vn#pt20',
                'xmlInvData' => '<Invoices>
                        <Inv>
                            <key>01</key>
                            <Invoice>
                                <CusCode>01</CusCode>
                                <CusName>Nguyễn A</CusName>
                                <CusAddress>Đà Nẵng</CusAddress>
                                <CusPhone>0909111111</CusPhone>
                                <CusTaxCode>0401280844</CusTaxCode>
                                <PaymentMethod>Thanh toán tiền mặt</PaymentMethod>
                                <KindOfService>9</KindOfService>
                                <Products>
                                    <Product>
                                        <ProdName>Căn hộ</ProdName>
                                        <ProdUnit>Tháng</ProdUnit>
                                        <ProdQuantity>1</ProdQuantity>
                                        <ProdPrice>10000</ProdPrice>
                                        <Amount>10000</Amount>
                                    </Product>
                                </Products>
                                <Total>10000</Total>
                                <DiscountAmount>0</DiscountAmount>
                                <VATRate>10</VATRate>
                                <VATAmount>1000</VATAmount>
                                <Amount>11000</Amount>
                                <AmountInWords>Mười một ngàn VND</AmountInWords>
                            </Invoice>
                        </Inv></Invoices> ',
                'username' => 'bvyhctdngservice',
                'password' => '123456aA@',
                'fkey' => 'KH01',
                'convert' => 0,
            );
            $res = $soapClient->adjustInv($param);



            
            // $array = json_decode(json_encode($res), true);

            return response([
                'Content-Type' => 'text/xml',
                'status' => 200,
                'message' => $res,
            ]);
        } catch(Exception $ex) {
            return response()->json([
                'status' => 400,
                'message' => $ex->getMessage(),
            ]);
        }
    }
                
}
