<?php

namespace App\Http\Controllers\Admin_12345;

use App\Models_12345\Qlv;
use Illuminate\Http\Request;
use App\Models_12345\Apartment;
use App\Http\Controllers\Controller;
use App\Repositories\AccountantQlvRepository;

class QlvController extends Controller
{
    protected $aqRepo;
    public function __construct(AccountantQlvRepository $aqRepo) {
        $this->aqRepo = $aqRepo;
    }

    public function index() {
        $qlvs = Qlv::paginate(5);
        $apartments = Apartment::all();
        return view('admins.categories.qlv.index', [
            'qlvs' => $qlvs,
            'apartments' => $apartments,
        ]);
    }

    public function create() {
    }

    public function store(Request $req) {
        $fullname = $req->get('fullname');
        $phoneNumber = $req->get('phoneNumber');
        $listApartmentId = $req->get('listApartmentId');
        $data = $this->aqRepo->store(new Qlv, new Apartment, $fullname, $phoneNumber, $listApartmentId, 'qlv_id', 'Quản lý viên');
        return response()->json($data);
    }

    public function show(Qlv $qlv) {
        $listApartmentOfQlv = Apartment::all()->where('qlv_id', $qlv->id);
        return response()->json([
            'status' => 200,
            'qlv' => $qlv,
            'listApartmentOfQlv' => $listApartmentOfQlv,
        ]);
    }

    public function edit(Qlv $qlv) {
        $data = $this->aqRepo->edit(new Apartment, 'qlv_id', $qlv, 'qlv', 'listApartment', 'apartments');
        return response()->json($data);
    }

    public function update(Request $req, Qlv $qlv) {
        $id = $req->get('id');
        $fullname = $req->get('fullname');
        $phoneNumber = $req->get('phoneNumber');
        $listApartmentId = $req->get('listApartmentId');
        $data = $this->aqRepo->updatee(new Qlv, new Apartment, $id, $fullname, $phoneNumber, $listApartmentId, 'qlv_id', $qlv, 'Quản lý viên');
        return response()->json($data); 
    }

    public function destroy(Qlv $qlv) {
        $data = $this->aqRepo->destroy(new Apartment, $qlv, 'qlv_id');
        return response()->json($data);
    }

    public function deleteMany(Request $req) {
        $allIds = $req->allIds;
        $data = $this->aqRepo->deleteMany(new Qlv, new Apartment, $allIds, 'qlv_id');
        return response()->json($data);
    }

    public function fetch(Request $req) {
        $apartments = Apartment::all();
        if($req->ajax()) {
            if($req->numRow > 0) {
                $qlvs = Qlv::paginate($req->numRow);
                return view('admins.categories.qlv.pagination', [
                    'qlvs' => $qlvs,
                    'apartments' => $apartments,
                ])->render();
            }
            $qlvs = Qlv::paginate(5);
            return view('admins.categories.qlv.pagination', [
                'qlvs' => $qlvs,
                'apartments' => $apartments,
            ])->render();
        }
    }

    public function getRow(Request $req) {
        $numRow = $req->get('numRow');
        $data = $this->aqRepo->getRow($numRow, new Qlv, 'qlvs', new Apartment, 'apartments');
        return view('admins.categories.qlv.pagination', $data)->render();
    }

    public function search(Request $req) {
        $qlvName = $req->get('qlvName');
        $apartmentName = $req->get('apartmentName');
        $qlvId = Apartment::where('name', $apartmentName)->value('qlv_id');
        $qlvs = Qlv::where('fullname', $qlvName)->orWhere('id', $qlvId)->paginate();
        $apartments = Apartment::all();
        return view('admins.categories.qlv.pagination', [
            'qlvs' => $qlvs,
            'apartments' => $apartments,
        ])->render();
    }
}
