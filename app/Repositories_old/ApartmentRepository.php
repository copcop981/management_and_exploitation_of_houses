<?php

namespace App\Repositories;

use App\Models_12345\Room;
use App\Models_12345\Block;
use App\Models_12345\Floor;
use Illuminate\Http\Request;
use App\Models_12345\Apartment;
use App\Http\Requests\RequestResetPass;
use App\Models_12345\Household;
use App\Models_12345\HouseholdRoom;

class ApartmentRepository extends AbstractRepository
{
    public function getModel()
    {
        return Apartment::class;
    }

    public function getApartmentByName($name) {

        return $this->model->where('name', $name)->first();

    }

    public function getList_3_1_ToModal($model, $model_instances) {
        $list = $model->select('name')->groupBy('name')->orderBy('name')->get();
        return [
            'status' => 200,
            $model_instances => $list,
        ];
    }

    public function filterList_3_1_OfDependence($apartment) {
        $blockOfApartment = Block::all()->where('apartment_id', $apartment->id);
        $floorOfBlock = null;
        $roomOfFloor = null;
        foreach($blockOfApartment as $block) {
            $floorOfBlock = Floor::all()->whereIn('block_id', $block->id);
            foreach($floorOfBlock as $floor) {
                $roomOfFloor = Room::all()->whereIn('floor_id', $floor->id);
            }
        }
        return [
            'status' => 200,
            'apartment' => $apartment,
            'blockOfApartment' => $blockOfApartment != null ? $blockOfApartment : null,
            'floorOfBlock' => $floorOfBlock != null ? $floorOfBlock : null,
            'roomOfFloor' => $roomOfFloor != null ? $roomOfFloor : null,
        ];
    }

    public function store_3_1($model, $name, $thiss) {
        $data = array();
        $exists = $model->all()->where('name', $name)->count();
        if($exists > 0) {
            $data['status'] = 400;
            $data['message'] = $thiss.' này đã tồn tại';
        } else {
            $model->create([ 'name' => $name, ]);
            $data['status'] = 200;
            $data['message'] = 'Tạo mới '.$thiss.' thành công';
        }
        return $data;
    }

    public function validate3($listBlockName, $listFloorName, $listRoomName, $existsApartment) {
        $data = array();
        if($existsApartment > 0) {
            $data['status'] = 400;
            $data['message'] = 'Chung cư này đã tồn tại';
        } else {
            if($listBlockName === null) {
                $data['status'] = 401;
                $data['message'] = 'Chưa chọn Nhà';
            } else if($listFloorName === null) {
                $data['status'] = 402;
                $data['message'] = 'Chưa chọn Tầng';
            } else if($listRoomName === null) {
                $data['status'] = 403;
                $data['message'] = 'Chưa chọn Căn hộ';
            }
        }
        return $data;
    }

    public function store3 ($listBlockName, $listFloorName, $listRoomName, $model1_id, $query, $action) {
        $data = array();
        $query2 = 0;
        $query3 = 0;
        $query4 = 0;
        // $arr = array();
        foreach($listBlockName as $blockName) {
            $block = new Block;
            $block->name = $blockName;
            $block->apartment_id = $model1_id;
            $query2 = $block->save();
            foreach($listFloorName as $floorName) {
                $floor = new Floor;
                $floor->name = $floorName;
                $floor->block_id = $block->id;
                $floor->apartment_id = $model1_id;
                $query3 = $floor->save();
                foreach($listRoomName as $roomName) {
                    $room = new Room;
                    $room->name = $roomName;
                    $room->floor_id = $floor->id;
                    $room->block_id = $block->id;
                    $room->apartment_id = $model1_id;
                    $query4 = $room->save();
                    // array_push($arr, $room->id);
                }
            }
        }
        // foreach($currRoom as $curr) {
        //     HouseholdRoom::where('room_id', $curr)->update([
        //         'room_id' => $room->id,
        //     ]);
        // }

        if($query > 0 && $query2 > 0 && $query3 > 0 && $query4 > 0) {
            $data['status'] = 200;
            $data['message'] = $action.' Chung cư thành công';
        } else {
            $data['status'] = 404;
            $data['message'] = $action.' không thành công';
        }
        return $data;
    }

    public function getIdFromApartmentName($apartmentName) {
        $apartmentId = $this->model->where('name', $apartmentName)->value('id');
        return $apartmentId;
    }

    public function getBlockIdFromApartment($apartmentName, $blockName) {
        $apartmentId = $this->getIdFromApartmentName($apartmentName);
        $blockId = Block::where('name', $blockName)->where('apartment_id', $apartmentId)->value('id');
        return $blockId;
    }

    public function getFloorIdFromBlock($apartmentName, $blockName, $floorName) {
        $blockId = $this->getBlockIdFromApartment($apartmentName, $blockName);
        $floorId = Floor::where('name', $floorName)->where('block_id', $blockId)->value('id');
        return $floorId;
    }

    public function getRoomIdFromRoom($apartmentName, $blockName, $floorName, $roomName) {
        $floorId = $this->getFloorIdFromBlock($apartmentName, $blockName, $floorName);
        $roomId = Room::where('name', $roomName)->where('floor_id', $floorId)->value('id');
        return $roomId;
    }
}
